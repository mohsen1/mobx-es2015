{"version":3,"sources":["webpack:///main.js","webpack:///webpack/bootstrap fadd3c1c1834b42112f7","webpack:////Users/mazimi/Projects/mobx/lib/es2015/mobx.js","webpack:///(webpack)/buildin/global.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./index.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","global","namedActionDecorator","target","prop","descriptor","createAction","actionFieldDecorator","apply","this","arguments","runInAction","arg1","arg2","arg3","actionName","fn","scope","invariant","getMessage","length","executeAction","undefined","isAction","thing","isMobxAction","defineBoundAction","propertyName","res","addHiddenProp","autorun","reactionRunner","view","reaction","getNextId","bind","Reaction","track","schedule","getDisposer","when","arg4","predicate","effect","r","dispose","prevUntracked","untrackedStart","untrackedEnd","autorunAsync","func","delay","isScheduled","setTimeout","isDisposed","expression","changed","v","valueDidChange","opts","compareStructural","nextValue","firstTime","fireImmediately","fail","isModifierDescriptor","struct","action","context","createComputedDecorator","createClassPropertyDecorator","_","__","originalDescriptor","defineComputedProperty","asObservableObject","set","observable","$mobx","values","createTransformer","transformer","onCleanup","objectCache","resetId","globalState","Transformer","_super","sourceIdentifier","sourceObject","_this","__extends","onBecomeUnobserved","lastValue","ComputedValue","identifier","getMemoizationId","reactiveTransformer","Error","tid","$transformId","expr","isComputingDerivation","console","warn","computed","extendObservable","properties","_i","extendObservableHelper","deepEnhancer","extendShallowObservable","referenceEnhancer","defaultEnhancer","isObservableMap","forEach","propSet","isObservable","adm","definedProps","key","isPropertyConfigurable","getOwnPropertyDescriptor","defineObservablePropertyFromDescriptor","getDependencyTree","nodeToDependencyTree","getAtom","node","result","observing","dependencies","unique","map","getObserverTree","nodeToObserverTree","hasObservers","observers","getObservers","intercept","propOrHandler","handler","interceptProperty","interceptInterceptable","getAdministration","isComputed","isObservableObject","isComputedValue","isObservableArray","isAtom","isReaction","createObservable","deepDecorator","box","incorrectlyUsedAsDecorator","methodName","createDecoratorForEnhancer","enhancer","baseValue","baseDescriptor","assertPropertyConfigurable","defineObservableProperty","setPropertyValue","observe","propOrCb","cbOrFire","observeObservableProperty","observeObservable","listener","toJS","source","detectCycles","__alreadySeen","cache","push","toAdd","res_1","isObservableValue","transaction","thisArg","deprecated","runInTransaction","log","msg","whyRun","trackingDerivation","originalFn","args","runInfo","startAction","endAction","notifySpy","isSpyEnabled","startTime","Date","now","flattendArgs","Array","spyReportStart","type","prevDerivation","startBatch","prevAllowStateChanges","allowStateChangesStart","allowStateChangesEnd","endBatch","spyReportEnd","time","useStrict","strict","strictMode","allowStateChanges","isStrictModeEnabled","prev","isCaughtException","e","CaughtException","shouldCompute","derivation","dependenciesState","IDerivationState","UP_TO_DATE","NOT_TRACKING","STALE","POSSIBLY_STALE","obs","obj","changeDependenciesStateTo0","checkIfStateModificationsAreAllowed","atom","computationDepth","trackDerivedFunction","f","newObserving","unboundDepsCount","runId","prevTracking","bindDependencies","prevObserving","i0","dep","diffValue","removeObserver","addObserver","clearObserving","untracked","lowestObserverState","shareGlobalState","getGlobal","ownState","__mobservableTrackingStack","__mobservableViewStack","__mobxGlobal","version","getGlobalState","registerGlobals","resetGlobalState","defaultGlobals","MobXGlobals","persistentKeys","indexOf","observersIndexes","__mapid","queueForUnobservation","list","map_1","filler","pop","index","isPendingUnobservation","pendingUnobservations","inBatch","runReactions","observable_1","reportObserved","lastAccessedBy","propagateChanged","onBecomeStale","propagateChangeConfirmed","propagateMaybeChanged","registerErrorHandler","errorHandler","onReactionError","globalReactionErrorHandlers","idx","splice","isRunningReactions","reactionScheduler","runReactionsHelper","allReactions","pendingReactions","iterations","MAX_REACTION_ITERATIONS","error","remainingReactions","runReaction","setReactionScheduler","baseScheduler","spyListeners","spyReport","event","listeners","objectAssign","change","END_EVENT","spy","once","hasInterceptors","interceptable","interceptors","registerInterceptor","interceptChange","prevU","hasListeners","listenable","changeListeners","registerListener","notifyListeners","slice","asReference","ref","asStructure","asFlat","shallow","asMap","data","isMobxModifierDescriptor","createModifierDescriptor","initialValue","isArray","array","isPlainObject","isES6Map","shallowEnhancer","shallowArray","shallowObject","shallowMap","newValue","deepStructEnhancer","oldValue","deepEqual","ObservableArray","ObservableMap","refStructEnhancer","createArrayBufferItem","createArraySetter","createArrayGetter","notifyArrayChildUpdate","spliceWithArray","impl","reserveArrayBuffer","max","OBSERVABLE_ARRAY_BUFFER_SIZE","isObject","isObservableArrayAdministration","initialValues","isExtensible","constructor","ObservableObjectAdministration","addHiddenFinalProp","propName","modifierDescriptor","autoBind","defineComputedPropertyFromComputedValue","ObservableValue","generateObservablePropConfig","notifyPropertyAddition","setter","asInstanceProperty","generateComputedPropConfig","computedValue","observablePropertyConfigs","computedPropertyConfigs","instance","prepareNewValue","UNCHANGED","notify","setNewValue","runLazyInitializers","isObservableObjectAdministration","anyThing","_keys","observable_2","_data","_hasMap","getDebugName","observable_3","named","onInitialize","allowCustomArguments","classPropertyDecorator","customArgs","argLen","quacksLikeADecorator","__mobxLazyInitializers","value_1","initializer_1","initializer","__mobxDidRunLazyInitializers","newDescriptor","__mobxInitializedProps","typescriptInitializeProperty","outerArgs","iteratorSymbol","Symbol","iterator","arrayAsIterator","IS_ITERATING_MARKER","done","declareIterator","prototType","iteratorFactory","id","messages","mobxGuid","message","check","deprecatedMessages","invoked","item","joinStrings","things","limit","separator","join","proto","getPrototypeOf","isNaN","prototypeHasOwnProperty","makeNonEnumerable","propNames","writable","getEnumerableKeys","a","b","aIsArray","isArrayLike","aIsMap","isMapLike","size","equals_1","entries","createInstanceofPredicate","clazz","x","Map","primitiveSymbol","toPrimitive","Atom","BaseAtom","IObservableFactories","extras","extendStatics","setPrototypeOf","__proto__","create","__MOBX_DEVTOOLS_GLOBAL_HOOK__","injectMobx","default","boundActionDecorator","bound","action_1","computedDecorator","computedStructDecorator","shallowDecorator","refDecorator","deepStructDecorator","refStructDecorator","shallowBox","props","deep","keys","reportChanged","toString","onBecomeObservedHandler","onBecomeUnobservedHandler","noop","isBeingTracked","isComputing","isRunningSetter","computeValue","trackAndCompute","cause","peek","prevValue","toJSON","valueOf","isTracking","Boolean","onInvalidate","_isScheduled","_isTrackPending","_isRunning","reportExceptionInDerivation","messageToUser","onError","MAX_SPLICE_SIZE","safariPrototypeSetterInheritanceBug","StubArray","ObservableArrayAdministration","owned","lastKnownLength","newV","oldV","added","addedCount","removed","removedCount","getArrayLength","setArrayLength","newLength","currentLength","newItems","updateArrayLength","oldLength","delta","deleteCount","Math","min","EMPTY_ARRAY","lengthDelta","spliceItemsIntoValues","notifyArraySplice","_a","concat","ENTRY_0","clear","arrays","replace","find","fromIndex","items","shift","unshift","reverse","clone","sort","compareFn","remove","move","toIndex","checkIndex","oldItems","toLocaleString","funcName","baseFunc","ObservableMapMarker","initialData","merge","_has","has","isValidKey","_updateHasMapEntry","assertValidKey","hasKey","_updateValue","_addValue","delete","entry","callback","other","hasUnreportedChange","m001","m002","m003","m004","m005","m006","m007","m008","m009","m010","m011","m012","m013","m014","m015","m016","m017","m018","m019","m020","m021","m022","m023","m024","m025","m026","m028","m029","m030a","m030b","m031","m032","m033","m034","m035","m036","m037","m038","freeze","g","Function","eval","window","originalModule","webpackPolyfill","children","__decorate","decorators","desc","Reflect","decorate","mobx_1","Something","foo","random","substring"],"mappings":"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","file":"main.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(module, global) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Atom\", function() { return Atom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseAtom\", function() { return BaseAtom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Reaction\", function() { return Reaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"untracked\", function() { return untracked; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IDerivationState\", function() { return IDerivationState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useStrict\", function() { return useStrict; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isStrictModeEnabled\", function() { return isStrictModeEnabled; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spy\", function() { return spy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asReference\", function() { return asReference; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asFlat\", function() { return asFlat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asStructure\", function() { return asStructure; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asMap\", function() { return asMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isModifierDescriptor\", function() { return isModifierDescriptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isObservableObject\", function() { return isObservableObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBoxedObservable\", function() { return isObservableValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isObservableArray\", function() { return isObservableArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObservableMap\", function() { return ObservableMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isObservableMap\", function() { return isObservableMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transaction\", function() { return transaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"observable\", function() { return observable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IObservableFactories\", function() { return IObservableFactories; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"computed\", function() { return computed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isObservable\", function() { return isObservable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isComputed\", function() { return isComputed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extendObservable\", function() { return extendObservable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extendShallowObservable\", function() { return extendShallowObservable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"observe\", function() { return observe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intercept\", function() { return intercept; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"autorun\", function() { return autorun; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"autorunAsync\", function() { return autorunAsync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"when\", function() { return when; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reaction\", function() { return reaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"action\", function() { return action; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isAction\", function() { return isAction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runInAction\", function() { return runInAction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expr\", function() { return expr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toJS\", function() { return toJS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTransformer\", function() { return createTransformer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"whyRun\", function() { return whyRun; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isArrayLike\", function() { return isArrayLike; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extras\", function() { return extras; });\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nregisterGlobals();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar extras = {\n    allowStateChanges: allowStateChanges,\n    deepEqual: deepEqual,\n    getAtom: getAtom,\n    getDebugName: getDebugName,\n    getDependencyTree: getDependencyTree,\n    getAdministration: getAdministration,\n    getGlobalState: getGlobalState,\n    getObserverTree: getObserverTree,\n    isComputingDerivation: isComputingDerivation,\n    isSpyEnabled: isSpyEnabled,\n    onReactionError: onReactionError,\n    resetGlobalState: resetGlobalState,\n    shareGlobalState: shareGlobalState,\n    spyReport: spyReport,\n    spyReportEnd: spyReportEnd,\n    spyReportStart: spyReportStart,\n    setReactionScheduler: setReactionScheduler\n};\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx(module.exports);\n}\nmodule.exports.default = module.exports;\nvar actionFieldDecorator = createClassPropertyDecorator(function (target, key, value, args, originalDescriptor) {\n    var actionName = (args && args.length === 1) ? args[0] : (value.name || key || \"<unnamed action>\");\n    var wrappedAction = action(actionName, value);\n    addHiddenProp(target, key, wrappedAction);\n}, function (key) {\n    return this[key];\n}, function () {\n    invariant(false, getMessage(\"m001\"));\n}, false, true);\nvar boundActionDecorator = createClassPropertyDecorator(function (target, key, value) {\n    defineBoundAction(target, key, value);\n}, function (key) {\n    return this[key];\n}, function () {\n    invariant(false, getMessage(\"m001\"));\n}, false, false);\nvar action = function action(arg1, arg2, arg3, arg4) {\n    if (arguments.length === 1 && typeof arg1 === \"function\")\n        return createAction(arg1.name || \"<unnamed action>\", arg1);\n    if (arguments.length === 2 && typeof arg2 === \"function\")\n        return createAction(arg1, arg2);\n    if (arguments.length === 1 && typeof arg1 === \"string\")\n        return namedActionDecorator(arg1);\n    return namedActionDecorator(arg2).apply(null, arguments);\n};\naction.bound = function boundAction(arg1, arg2, arg3) {\n    if (typeof arg1 === \"function\") {\n        var action_1 = createAction(\"<not yet bound action>\", arg1);\n        action_1.autoBind = true;\n        return action_1;\n    }\n    return boundActionDecorator.apply(null, arguments);\n};\nfunction namedActionDecorator(name) {\n    return function (target, prop, descriptor) {\n        if (descriptor && typeof descriptor.value === \"function\") {\n            descriptor.value = createAction(name, descriptor.value);\n            descriptor.enumerable = false;\n            descriptor.configurable = true;\n            return descriptor;\n        }\n        return actionFieldDecorator(name).apply(this, arguments);\n    };\n}\nfunction runInAction(arg1, arg2, arg3) {\n    var actionName = typeof arg1 === \"string\" ? arg1 : arg1.name || \"<unnamed action>\";\n    var fn = typeof arg1 === \"function\" ? arg1 : arg2;\n    var scope = typeof arg1 === \"function\" ? arg2 : arg3;\n    invariant(typeof fn === \"function\", getMessage(\"m002\"));\n    invariant(fn.length === 0, getMessage(\"m003\"));\n    invariant(typeof actionName === \"string\" && actionName.length > 0, \"actions should have valid names, got: '\" + actionName + \"'\");\n    return executeAction(actionName, fn, scope, undefined);\n}\nfunction isAction(thing) {\n    return typeof thing === \"function\" && thing.isMobxAction === true;\n}\nfunction defineBoundAction(target, propertyName, fn) {\n    var res = function () {\n        return executeAction(propertyName, fn, target, arguments);\n    };\n    res.isMobxAction = true;\n    addHiddenProp(target, propertyName, res);\n}\nfunction autorun(arg1, arg2, arg3) {\n    var name, view, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        view = arg2;\n        scope = arg3;\n    }\n    else {\n        name = arg1.name || (\"Autorun@\" + getNextId());\n        view = arg1;\n        scope = arg2;\n    }\n    invariant(typeof view === \"function\", getMessage(\"m004\"));\n    invariant(isAction(view) === false, getMessage(\"m005\"));\n    if (scope)\n        view = view.bind(scope);\n    var reaction = new Reaction(name, function () {\n        this.track(reactionRunner);\n    });\n    function reactionRunner() {\n        view(reaction);\n    }\n    reaction.schedule();\n    return reaction.getDisposer();\n}\nfunction when(arg1, arg2, arg3, arg4) {\n    var name, predicate, effect, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        predicate = arg2;\n        effect = arg3;\n        scope = arg4;\n    }\n    else {\n        name = (\"When@\" + getNextId());\n        predicate = arg1;\n        effect = arg2;\n        scope = arg3;\n    }\n    var disposer = autorun(name, function (r) {\n        if (predicate.call(scope)) {\n            r.dispose();\n            var prevUntracked = untrackedStart();\n            effect.call(scope);\n            untrackedEnd(prevUntracked);\n        }\n    });\n    return disposer;\n}\nfunction autorunAsync(arg1, arg2, arg3, arg4) {\n    var name, func, delay, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        func = arg2;\n        delay = arg3;\n        scope = arg4;\n    }\n    else {\n        name = arg1.name || (\"AutorunAsync@\" + getNextId());\n        func = arg1;\n        delay = arg2;\n        scope = arg3;\n    }\n    invariant(isAction(func) === false, getMessage(\"m006\"));\n    if (delay === void 0)\n        delay = 1;\n    if (scope)\n        func = func.bind(scope);\n    var isScheduled = false;\n    var r = new Reaction(name, function () {\n        if (!isScheduled) {\n            isScheduled = true;\n            setTimeout(function () {\n                isScheduled = false;\n                if (!r.isDisposed)\n                    r.track(reactionRunner);\n            }, delay);\n        }\n    });\n    function reactionRunner() { func(r); }\n    r.schedule();\n    return r.getDisposer();\n}\nfunction reaction(expression, effect, arg3) {\n    if (arguments.length > 3) {\n        fail(getMessage(\"m007\"));\n    }\n    if (isModifierDescriptor(expression)) {\n        fail(getMessage(\"m008\"));\n    }\n    var opts;\n    if (typeof arg3 === \"object\") {\n        opts = arg3;\n    }\n    else {\n        opts = {};\n    }\n    opts.name = opts.name || expression.name || effect.name || (\"Reaction@\" + getNextId());\n    opts.fireImmediately = arg3 === true || opts.fireImmediately === true;\n    opts.delay = opts.delay || 0;\n    opts.compareStructural = opts.compareStructural || opts.struct || false;\n    effect = action(opts.name, opts.context ? effect.bind(opts.context) : effect);\n    if (opts.context) {\n        expression = expression.bind(opts.context);\n    }\n    var firstTime = true;\n    var isScheduled = false;\n    var nextValue;\n    var r = new Reaction(opts.name, function () {\n        if (firstTime || opts.delay < 1) {\n            reactionRunner();\n        }\n        else if (!isScheduled) {\n            isScheduled = true;\n            setTimeout(function () {\n                isScheduled = false;\n                reactionRunner();\n            }, opts.delay);\n        }\n    });\n    function reactionRunner() {\n        if (r.isDisposed)\n            return;\n        var changed = false;\n        r.track(function () {\n            var v = expression(r);\n            changed = valueDidChange(opts.compareStructural, nextValue, v);\n            nextValue = v;\n        });\n        if (firstTime && opts.fireImmediately)\n            effect(nextValue, r);\n        if (!firstTime && changed === true)\n            effect(nextValue, r);\n        if (firstTime)\n            firstTime = false;\n    }\n    r.schedule();\n    return r.getDisposer();\n}\nfunction createComputedDecorator(compareStructural) {\n    return createClassPropertyDecorator(function (target, name, _, __, originalDescriptor) {\n        invariant(typeof originalDescriptor !== \"undefined\", getMessage(\"m009\"));\n        invariant(typeof originalDescriptor.get === \"function\", getMessage(\"m010\"));\n        var adm = asObservableObject(target, \"\");\n        defineComputedProperty(adm, name, originalDescriptor.get, originalDescriptor.set, compareStructural, false);\n    }, function (name) {\n        var observable = this.$mobx.values[name];\n        if (observable === undefined)\n            return undefined;\n        return observable.get();\n    }, function (name, value) {\n        this.$mobx.values[name].set(value);\n    }, false, false);\n}\nvar computedDecorator = createComputedDecorator(false);\nvar computedStructDecorator = createComputedDecorator(true);\nvar computed = (function computed(arg1, arg2, arg3) {\n    if (typeof arg2 === \"string\") {\n        return computedDecorator.apply(null, arguments);\n    }\n    invariant(typeof arg1 === \"function\", getMessage(\"m011\"));\n    invariant(arguments.length < 3, getMessage(\"m012\"));\n    var opts = typeof arg2 === \"object\" ? arg2 : {};\n    opts.setter = typeof arg2 === \"function\" ? arg2 : opts.setter;\n    return new ComputedValue(arg1, opts.context, opts.compareStructural || opts.struct || false, opts.name || arg1.name || \"\", opts.setter);\n});\ncomputed.struct = computedStructDecorator;\nfunction createTransformer(transformer, onCleanup) {\n    invariant(typeof transformer === \"function\" && transformer.length < 2, \"createTransformer expects a function that accepts one argument\");\n    var objectCache = {};\n    var resetId = globalState.resetId;\n    var Transformer = (function (_super) {\n        __extends(Transformer, _super);\n        function Transformer(sourceIdentifier, sourceObject) {\n            var _this = _super.call(this, function () { return transformer(sourceObject); }, undefined, false, \"Transformer-\" + transformer.name + \"-\" + sourceIdentifier, undefined) || this;\n            _this.sourceIdentifier = sourceIdentifier;\n            _this.sourceObject = sourceObject;\n            return _this;\n        }\n        Transformer.prototype.onBecomeUnobserved = function () {\n            var lastValue = this.value;\n            _super.prototype.onBecomeUnobserved.call(this);\n            delete objectCache[this.sourceIdentifier];\n            if (onCleanup)\n                onCleanup(lastValue, this.sourceObject);\n        };\n        return Transformer;\n    }(ComputedValue));\n    return function (object) {\n        if (resetId !== globalState.resetId) {\n            objectCache = {};\n            resetId = globalState.resetId;\n        }\n        var identifier = getMemoizationId(object);\n        var reactiveTransformer = objectCache[identifier];\n        if (reactiveTransformer)\n            return reactiveTransformer.get();\n        reactiveTransformer = objectCache[identifier] = new Transformer(identifier, object);\n        return reactiveTransformer.get();\n    };\n}\nfunction getMemoizationId(object) {\n    if (object === null || typeof object !== \"object\")\n        throw new Error(\"[mobx] transform expected some kind of object, got: \" + object);\n    var tid = object.$transformId;\n    if (tid === undefined) {\n        tid = getNextId();\n        addHiddenProp(object, \"$transformId\", tid);\n    }\n    return tid;\n}\nfunction expr(expr, scope) {\n    if (!isComputingDerivation())\n        console.warn(getMessage(\"m013\"));\n    return computed(expr, { context: scope }).get();\n}\nfunction extendObservable(target) {\n    var properties = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        properties[_i - 1] = arguments[_i];\n    }\n    return extendObservableHelper(target, deepEnhancer, properties);\n}\nfunction extendShallowObservable(target) {\n    var properties = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        properties[_i - 1] = arguments[_i];\n    }\n    return extendObservableHelper(target, referenceEnhancer, properties);\n}\nfunction extendObservableHelper(target, defaultEnhancer, properties) {\n    invariant(arguments.length >= 2, getMessage(\"m014\"));\n    invariant(typeof target === \"object\", getMessage(\"m015\"));\n    invariant(!(isObservableMap(target)), getMessage(\"m016\"));\n    properties.forEach(function (propSet) {\n        invariant(typeof propSet === \"object\", getMessage(\"m017\"));\n        invariant(!isObservable(propSet), getMessage(\"m018\"));\n    });\n    var adm = asObservableObject(target);\n    var definedProps = {};\n    for (var i = properties.length - 1; i >= 0; i--) {\n        var propSet = properties[i];\n        for (var key in propSet)\n            if (definedProps[key] !== true && hasOwnProperty(propSet, key)) {\n                definedProps[key] = true;\n                if (target === propSet && !isPropertyConfigurable(target, key))\n                    continue;\n                var descriptor = Object.getOwnPropertyDescriptor(propSet, key);\n                defineObservablePropertyFromDescriptor(adm, key, descriptor, defaultEnhancer);\n            }\n    }\n    return target;\n}\nfunction getDependencyTree(thing, property) {\n    return nodeToDependencyTree(getAtom(thing, property));\n}\nfunction nodeToDependencyTree(node) {\n    var result = {\n        name: node.name\n    };\n    if (node.observing && node.observing.length > 0)\n        result.dependencies = unique(node.observing).map(nodeToDependencyTree);\n    return result;\n}\nfunction getObserverTree(thing, property) {\n    return nodeToObserverTree(getAtom(thing, property));\n}\nfunction nodeToObserverTree(node) {\n    var result = {\n        name: node.name\n    };\n    if (hasObservers(node))\n        result.observers = getObservers(node).map(nodeToObserverTree);\n    return result;\n}\nfunction intercept(thing, propOrHandler, handler) {\n    if (typeof handler === \"function\")\n        return interceptProperty(thing, propOrHandler, handler);\n    else\n        return interceptInterceptable(thing, propOrHandler);\n}\nfunction interceptInterceptable(thing, handler) {\n    return getAdministration(thing).intercept(handler);\n}\nfunction interceptProperty(thing, property, handler) {\n    return getAdministration(thing, property).intercept(handler);\n}\nfunction isComputed(value, property) {\n    if (value === null || value === undefined)\n        return false;\n    if (property !== undefined) {\n        if (isObservableObject(value) === false)\n            return false;\n        var atom = getAtom(value, property);\n        return isComputedValue(atom);\n    }\n    return isComputedValue(value);\n}\nfunction isObservable(value, property) {\n    if (value === null || value === undefined)\n        return false;\n    if (property !== undefined) {\n        if (isObservableArray(value) || isObservableMap(value))\n            throw new Error(getMessage(\"m019\"));\n        else if (isObservableObject(value)) {\n            var o = value.$mobx;\n            return o.values && !!o.values[property];\n        }\n        return false;\n    }\n    return isObservableObject(value) || !!value.$mobx || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\nvar deepDecorator = createDecoratorForEnhancer(deepEnhancer);\nvar shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);\nvar refDecorator = createDecoratorForEnhancer(referenceEnhancer);\nvar deepStructDecorator = createDecoratorForEnhancer(deepStructEnhancer);\nvar refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);\nfunction createObservable(v) {\n    if (v === void 0) { v = undefined; }\n    if (typeof arguments[1] === \"string\")\n        return deepDecorator.apply(null, arguments);\n    invariant(arguments.length <= 1, getMessage(\"m021\"));\n    invariant(!isModifierDescriptor(v), getMessage(\"m020\"));\n    if (isObservable(v))\n        return v;\n    var res = deepEnhancer(v, undefined, undefined);\n    if (res !== v)\n        return res;\n    return observable.box(v);\n}\nvar IObservableFactories = (function () {\n    function IObservableFactories() {\n    }\n    IObservableFactories.prototype.box = function (value, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"box\");\n        return new ObservableValue(value, deepEnhancer, name);\n    };\n    IObservableFactories.prototype.shallowBox = function (value, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowBox\");\n        return new ObservableValue(value, referenceEnhancer, name);\n    };\n    IObservableFactories.prototype.array = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"array\");\n        return new ObservableArray(initialValues, deepEnhancer, name);\n    };\n    IObservableFactories.prototype.shallowArray = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowArray\");\n        return new ObservableArray(initialValues, referenceEnhancer, name);\n    };\n    IObservableFactories.prototype.map = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"map\");\n        return new ObservableMap(initialValues, deepEnhancer, name);\n    };\n    IObservableFactories.prototype.shallowMap = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowMap\");\n        return new ObservableMap(initialValues, referenceEnhancer, name);\n    };\n    IObservableFactories.prototype.object = function (props, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"object\");\n        var res = {};\n        asObservableObject(res, name);\n        extendObservable(res, props);\n        return res;\n    };\n    IObservableFactories.prototype.shallowObject = function (props, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowObject\");\n        var res = {};\n        asObservableObject(res, name);\n        extendShallowObservable(res, props);\n        return res;\n    };\n    IObservableFactories.prototype.ref = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(referenceEnhancer, arguments[0]);\n        }\n        else {\n            return refDecorator.apply(null, arguments);\n        }\n    };\n    IObservableFactories.prototype.shallow = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(shallowEnhancer, arguments[0]);\n        }\n        else {\n            return shallowDecorator.apply(null, arguments);\n        }\n    };\n    IObservableFactories.prototype.deep = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(deepEnhancer, arguments[0]);\n        }\n        else {\n            return deepDecorator.apply(null, arguments);\n        }\n    };\n    IObservableFactories.prototype.struct = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(deepStructEnhancer, arguments[0]);\n        }\n        else {\n            return deepStructDecorator.apply(null, arguments);\n        }\n    };\n    return IObservableFactories;\n}());\nvar observable = createObservable;\nObject.keys(IObservableFactories.prototype).forEach(function (key) { return observable[key] = IObservableFactories.prototype[key]; });\nobservable.deep.struct = observable.struct;\nobservable.ref.struct = function () {\n    if (arguments.length < 2) {\n        return createModifierDescriptor(refStructEnhancer, arguments[0]);\n    }\n    else {\n        return refStructDecorator.apply(null, arguments);\n    }\n};\nfunction incorrectlyUsedAsDecorator(methodName) {\n    fail(\"Expected one or two arguments to observable.\" + methodName + \". Did you accidentally try to use observable.\" + methodName + \" as decorator?\");\n}\nfunction createDecoratorForEnhancer(enhancer) {\n    invariant(!!enhancer, \":(\");\n    return createClassPropertyDecorator(function (target, name, baseValue, _, baseDescriptor) {\n        assertPropertyConfigurable(target, name);\n        invariant(!baseDescriptor || !baseDescriptor.get, getMessage(\"m022\"));\n        var adm = asObservableObject(target, undefined);\n        defineObservableProperty(adm, name, baseValue, enhancer);\n    }, function (name) {\n        var observable = this.$mobx.values[name];\n        if (observable === undefined)\n            return undefined;\n        return observable.get();\n    }, function (name, value) {\n        setPropertyValue(this, name, value);\n    }, true, false);\n}\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n    if (typeof cbOrFire === \"function\")\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);\n    else\n        return observeObservable(thing, propOrCb, cbOrFire);\n}\nfunction observeObservable(thing, listener, fireImmediately) {\n    return getAdministration(thing).observe(listener, fireImmediately);\n}\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n    return getAdministration(thing, property).observe(listener, fireImmediately);\n}\nfunction toJS(source, detectCycles, __alreadySeen) {\n    if (detectCycles === void 0) { detectCycles = true; }\n    if (__alreadySeen === void 0) { __alreadySeen = []; }\n    function cache(value) {\n        if (detectCycles)\n            __alreadySeen.push([source, value]);\n        return value;\n    }\n    if (isObservable(source)) {\n        if (detectCycles && __alreadySeen === null)\n            __alreadySeen = [];\n        if (detectCycles && source !== null && typeof source === \"object\") {\n            for (var i = 0, l = __alreadySeen.length; i < l; i++)\n                if (__alreadySeen[i][0] === source)\n                    return __alreadySeen[i][1];\n        }\n        if (isObservableArray(source)) {\n            var res = cache([]);\n            var toAdd = source.map(function (value) { return toJS(value, detectCycles, __alreadySeen); });\n            res.length = toAdd.length;\n            for (var i = 0, l = toAdd.length; i < l; i++)\n                res[i] = toAdd[i];\n            return res;\n        }\n        if (isObservableObject(source)) {\n            var res = cache({});\n            for (var key in source)\n                res[key] = toJS(source[key], detectCycles, __alreadySeen);\n            return res;\n        }\n        if (isObservableMap(source)) {\n            var res_1 = cache({});\n            source.forEach(function (value, key) { return res_1[key] = toJS(value, detectCycles, __alreadySeen); });\n            return res_1;\n        }\n        if (isObservableValue(source))\n            return toJS(source.get(), detectCycles, __alreadySeen);\n    }\n    return source;\n}\nfunction transaction(action, thisArg) {\n    if (thisArg === void 0) { thisArg = undefined; }\n    deprecated(getMessage(\"m023\"));\n    return runInTransaction.apply(undefined, arguments);\n}\nfunction runInTransaction(action, thisArg) {\n    if (thisArg === void 0) { thisArg = undefined; }\n    return executeAction(\"\", action);\n}\nfunction log(msg) {\n    console.log(msg);\n    return msg;\n}\nfunction whyRun(thing, prop) {\n    switch (arguments.length) {\n        case 0:\n            thing = globalState.trackingDerivation;\n            if (!thing)\n                return log(getMessage(\"m024\"));\n            break;\n        case 2:\n            thing = getAtom(thing, prop);\n            break;\n    }\n    thing = getAtom(thing);\n    if (isComputedValue(thing))\n        return log(thing.whyRun());\n    else if (isReaction(thing))\n        return log(thing.whyRun());\n    return fail(getMessage(\"m025\"));\n}\nfunction createAction(actionName, fn) {\n    invariant(typeof fn === \"function\", getMessage(\"m026\"));\n    invariant(typeof actionName === \"string\" && actionName.length > 0, \"actions should have valid names, got: '\" + actionName + \"'\");\n    var res = function () {\n        return executeAction(actionName, fn, this, arguments);\n    };\n    res.originalFn = fn;\n    res.isMobxAction = true;\n    return res;\n}\nfunction executeAction(actionName, fn, scope, args) {\n    var runInfo = startAction(actionName, fn, scope, args);\n    try {\n        return fn.apply(scope, args);\n    }\n    finally {\n        endAction(runInfo);\n    }\n}\nfunction startAction(actionName, fn, scope, args) {\n    var notifySpy = isSpyEnabled() && !!actionName;\n    var startTime = 0;\n    if (notifySpy) {\n        startTime = Date.now();\n        var l = (args && args.length) || 0;\n        var flattendArgs = new Array(l);\n        if (l > 0)\n            for (var i = 0; i < l; i++)\n                flattendArgs[i] = args[i];\n        spyReportStart({\n            type: \"action\",\n            name: actionName,\n            fn: fn,\n            object: scope,\n            arguments: flattendArgs\n        });\n    }\n    var prevDerivation = untrackedStart();\n    startBatch();\n    var prevAllowStateChanges = allowStateChangesStart(true);\n    return {\n        prevDerivation: prevDerivation,\n        prevAllowStateChanges: prevAllowStateChanges,\n        notifySpy: notifySpy,\n        startTime: startTime\n    };\n}\nfunction endAction(runInfo) {\n    allowStateChangesEnd(runInfo.prevAllowStateChanges);\n    endBatch();\n    untrackedEnd(runInfo.prevDerivation);\n    if (runInfo.notifySpy)\n        spyReportEnd({ time: Date.now() - runInfo.startTime });\n}\nfunction useStrict(strict) {\n    invariant(globalState.trackingDerivation === null, getMessage(\"m028\"));\n    globalState.strictMode = strict;\n    globalState.allowStateChanges = !strict;\n}\nfunction isStrictModeEnabled() {\n    return globalState.strictMode;\n}\nfunction allowStateChanges(allowStateChanges, func) {\n    var prev = allowStateChangesStart(allowStateChanges);\n    var res;\n    try {\n        res = func();\n    }\n    finally {\n        allowStateChangesEnd(prev);\n    }\n    return res;\n}\nfunction allowStateChangesStart(allowStateChanges) {\n    var prev = globalState.allowStateChanges;\n    globalState.allowStateChanges = allowStateChanges;\n    return prev;\n}\nfunction allowStateChangesEnd(prev) {\n    globalState.allowStateChanges = prev;\n}\nvar BaseAtom = (function () {\n    function BaseAtom(name) {\n        if (name === void 0) { name = \"Atom@\" + getNextId(); }\n        this.name = name;\n        this.isPendingUnobservation = true;\n        this.observers = [];\n        this.observersIndexes = {};\n        this.diffValue = 0;\n        this.lastAccessedBy = 0;\n        this.lowestObserverState = IDerivationState.NOT_TRACKING;\n    }\n    BaseAtom.prototype.onBecomeUnobserved = function () {\n    };\n    BaseAtom.prototype.reportObserved = function () {\n        reportObserved(this);\n    };\n    BaseAtom.prototype.reportChanged = function () {\n        startBatch();\n        propagateChanged(this);\n        endBatch();\n    };\n    BaseAtom.prototype.toString = function () {\n        return this.name;\n    };\n    return BaseAtom;\n}());\nvar Atom = (function (_super) {\n    __extends(Atom, _super);\n    function Atom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n        if (name === void 0) { name = \"Atom@\" + getNextId(); }\n        if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop; }\n        if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop; }\n        var _this = _super.call(this, name) || this;\n        _this.name = name;\n        _this.onBecomeObservedHandler = onBecomeObservedHandler;\n        _this.onBecomeUnobservedHandler = onBecomeUnobservedHandler;\n        _this.isPendingUnobservation = false;\n        _this.isBeingTracked = false;\n        return _this;\n    }\n    Atom.prototype.reportObserved = function () {\n        startBatch();\n        _super.prototype.reportObserved.call(this);\n        if (!this.isBeingTracked) {\n            this.isBeingTracked = true;\n            this.onBecomeObservedHandler();\n        }\n        endBatch();\n        return !!globalState.trackingDerivation;\n    };\n    Atom.prototype.onBecomeUnobserved = function () {\n        this.isBeingTracked = false;\n        this.onBecomeUnobservedHandler();\n    };\n    return Atom;\n}(BaseAtom));\nvar isAtom = createInstanceofPredicate(\"Atom\", BaseAtom);\nvar ComputedValue = (function () {\n    function ComputedValue(derivation, scope, compareStructural, name, setter) {\n        this.derivation = derivation;\n        this.scope = scope;\n        this.compareStructural = compareStructural;\n        this.dependenciesState = IDerivationState.NOT_TRACKING;\n        this.observing = [];\n        this.newObserving = null;\n        this.isPendingUnobservation = false;\n        this.observers = [];\n        this.observersIndexes = {};\n        this.diffValue = 0;\n        this.runId = 0;\n        this.lastAccessedBy = 0;\n        this.lowestObserverState = IDerivationState.UP_TO_DATE;\n        this.unboundDepsCount = 0;\n        this.__mapid = \"#\" + getNextId();\n        this.value = undefined;\n        this.isComputing = false;\n        this.isRunningSetter = false;\n        this.name = name || \"ComputedValue@\" + getNextId();\n        if (setter)\n            this.setter = createAction(name + \"-setter\", setter);\n    }\n    ComputedValue.prototype.onBecomeStale = function () {\n        propagateMaybeChanged(this);\n    };\n    ComputedValue.prototype.onBecomeUnobserved = function () {\n        invariant(this.dependenciesState !== IDerivationState.NOT_TRACKING, getMessage(\"m029\"));\n        clearObserving(this);\n        this.value = undefined;\n    };\n    ComputedValue.prototype.get = function () {\n        invariant(!this.isComputing, \"Cycle detected in computation \" + this.name, this.derivation);\n        if (globalState.inBatch === 0) {\n            startBatch();\n            if (shouldCompute(this))\n                this.value = this.computeValue(false);\n            endBatch();\n        }\n        else {\n            reportObserved(this);\n            if (shouldCompute(this))\n                if (this.trackAndCompute())\n                    propagateChangeConfirmed(this);\n        }\n        var result = this.value;\n        if (isCaughtException(result))\n            throw result.cause;\n        return result;\n    };\n    ComputedValue.prototype.peek = function () {\n        var res = this.computeValue(false);\n        if (isCaughtException(res))\n            throw res.cause;\n        return res;\n    };\n    ComputedValue.prototype.set = function (value) {\n        if (this.setter) {\n            invariant(!this.isRunningSetter, \"The setter of computed value '\" + this.name + \"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?\");\n            this.isRunningSetter = true;\n            try {\n                this.setter.call(this.scope, value);\n            }\n            finally {\n                this.isRunningSetter = false;\n            }\n        }\n        else\n            invariant(false, \"[ComputedValue '\" + this.name + \"'] It is not possible to assign a new value to a computed value.\");\n    };\n    ComputedValue.prototype.trackAndCompute = function () {\n        if (isSpyEnabled()) {\n            spyReport({\n                object: this.scope,\n                type: \"compute\",\n                fn: this.derivation\n            });\n        }\n        var oldValue = this.value;\n        var newValue = this.value = this.computeValue(true);\n        return isCaughtException(newValue) || valueDidChange(this.compareStructural, newValue, oldValue);\n    };\n    ComputedValue.prototype.computeValue = function (track) {\n        this.isComputing = true;\n        globalState.computationDepth++;\n        var res;\n        if (track) {\n            res = trackDerivedFunction(this, this.derivation, this.scope);\n        }\n        else {\n            try {\n                res = this.derivation.call(this.scope);\n            }\n            catch (e) {\n                res = new CaughtException(e);\n            }\n        }\n        globalState.computationDepth--;\n        this.isComputing = false;\n        return res;\n    };\n    ;\n    ComputedValue.prototype.observe = function (listener, fireImmediately) {\n        var _this = this;\n        var firstTime = true;\n        var prevValue = undefined;\n        return autorun(function () {\n            var newValue = _this.get();\n            if (!firstTime || fireImmediately) {\n                var prevU = untrackedStart();\n                listener({\n                    type: \"update\",\n                    object: _this,\n                    newValue: newValue,\n                    oldValue: prevValue\n                });\n                untrackedEnd(prevU);\n            }\n            firstTime = false;\n            prevValue = newValue;\n        });\n    };\n    ComputedValue.prototype.toJSON = function () {\n        return this.get();\n    };\n    ComputedValue.prototype.toString = function () {\n        return this.name + \"[\" + this.derivation.toString() + \"]\";\n    };\n    ComputedValue.prototype.valueOf = function () {\n        return toPrimitive(this.get());\n    };\n    ;\n    ComputedValue.prototype.whyRun = function () {\n        var isTracking = Boolean(globalState.trackingDerivation);\n        var observing = unique(this.isComputing ? this.newObserving : this.observing).map(function (dep) { return dep.name; });\n        var observers = unique(getObservers(this).map(function (dep) { return dep.name; }));\n        return (\"\\nWhyRun? computation '\" + this.name + \"':\\n * Running because: \" + (isTracking ? \"[active] the value of this computation is needed by a reaction\" : this.isComputing ? \"[get] The value of this computed was requested outside a reaction\" : \"[idle] not running at the moment\") + \"\\n\" +\n            (this.dependenciesState === IDerivationState.NOT_TRACKING ? getMessage(\"m032\") :\n                \" * This computation will re-run if any of the following observables changes:\\n    \" + joinStrings(observing) + \"\\n    \" + ((this.isComputing && isTracking) ? \" (... or any observable accessed during the remainder of the current run)\" : \"\") + \"\\n\\t\" + getMessage(\"m038\") + \"\\n\\n  * If the outcome of this computation changes, the following observers will be re-run:\\n    \" + joinStrings(observers) + \"\\n\"));\n    };\n    return ComputedValue;\n}());\nComputedValue.prototype[primitiveSymbol()] = ComputedValue.prototype.valueOf;\nvar isComputedValue = createInstanceofPredicate(\"ComputedValue\", ComputedValue);\nvar IDerivationState;\n(function (IDerivationState) {\n    IDerivationState[IDerivationState[\"NOT_TRACKING\"] = -1] = \"NOT_TRACKING\";\n    IDerivationState[IDerivationState[\"UP_TO_DATE\"] = 0] = \"UP_TO_DATE\";\n    IDerivationState[IDerivationState[\"POSSIBLY_STALE\"] = 1] = \"POSSIBLY_STALE\";\n    IDerivationState[IDerivationState[\"STALE\"] = 2] = \"STALE\";\n})(IDerivationState || (IDerivationState = {}));\nvar CaughtException = (function () {\n    function CaughtException(cause) {\n        this.cause = cause;\n    }\n    return CaughtException;\n}());\nfunction isCaughtException(e) {\n    return e instanceof CaughtException;\n}\nfunction shouldCompute(derivation) {\n    switch (derivation.dependenciesState) {\n        case IDerivationState.UP_TO_DATE: return false;\n        case IDerivationState.NOT_TRACKING:\n        case IDerivationState.STALE: return true;\n        case IDerivationState.POSSIBLY_STALE: {\n            var prevUntracked = untrackedStart();\n            var obs = derivation.observing, l = obs.length;\n            for (var i = 0; i < l; i++) {\n                var obj = obs[i];\n                if (isComputedValue(obj)) {\n                    try {\n                        obj.get();\n                    }\n                    catch (e) {\n                        untrackedEnd(prevUntracked);\n                        return true;\n                    }\n                    if (derivation.dependenciesState === IDerivationState.STALE) {\n                        untrackedEnd(prevUntracked);\n                        return true;\n                    }\n                }\n            }\n            changeDependenciesStateTo0(derivation);\n            untrackedEnd(prevUntracked);\n            return false;\n        }\n    }\n}\nfunction isComputingDerivation() {\n    return globalState.trackingDerivation !== null;\n}\nfunction checkIfStateModificationsAreAllowed(atom) {\n    var hasObservers = atom.observers.length > 0;\n    if (globalState.computationDepth > 0 && hasObservers)\n        fail(getMessage(\"m031\") + atom.name);\n    if (!globalState.allowStateChanges && hasObservers)\n        fail(getMessage(globalState.strictMode ? \"m030a\" : \"m030b\") + atom.name);\n}\nfunction trackDerivedFunction(derivation, f, context) {\n    changeDependenciesStateTo0(derivation);\n    derivation.newObserving = new Array(derivation.observing.length + 100);\n    derivation.unboundDepsCount = 0;\n    derivation.runId = ++globalState.runId;\n    var prevTracking = globalState.trackingDerivation;\n    globalState.trackingDerivation = derivation;\n    var result;\n    try {\n        result = f.call(context);\n    }\n    catch (e) {\n        result = new CaughtException(e);\n    }\n    globalState.trackingDerivation = prevTracking;\n    bindDependencies(derivation);\n    return result;\n}\nfunction bindDependencies(derivation) {\n    var prevObserving = derivation.observing;\n    var observing = derivation.observing = derivation.newObserving;\n    derivation.newObserving = null;\n    var i0 = 0, l = derivation.unboundDepsCount;\n    for (var i = 0; i < l; i++) {\n        var dep = observing[i];\n        if (dep.diffValue === 0) {\n            dep.diffValue = 1;\n            if (i0 !== i)\n                observing[i0] = dep;\n            i0++;\n        }\n    }\n    observing.length = i0;\n    l = prevObserving.length;\n    while (l--) {\n        var dep = prevObserving[l];\n        if (dep.diffValue === 0) {\n            removeObserver(dep, derivation);\n        }\n        dep.diffValue = 0;\n    }\n    while (i0--) {\n        var dep = observing[i0];\n        if (dep.diffValue === 1) {\n            dep.diffValue = 0;\n            addObserver(dep, derivation);\n        }\n    }\n}\nfunction clearObserving(derivation) {\n    var obs = derivation.observing;\n    var i = obs.length;\n    while (i--)\n        removeObserver(obs[i], derivation);\n    derivation.dependenciesState = IDerivationState.NOT_TRACKING;\n    obs.length = 0;\n}\nfunction untracked(action) {\n    var prev = untrackedStart();\n    var res = action();\n    untrackedEnd(prev);\n    return res;\n}\nfunction untrackedStart() {\n    var prev = globalState.trackingDerivation;\n    globalState.trackingDerivation = null;\n    return prev;\n}\nfunction untrackedEnd(prev) {\n    globalState.trackingDerivation = prev;\n}\nfunction changeDependenciesStateTo0(derivation) {\n    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)\n        return;\n    derivation.dependenciesState = IDerivationState.UP_TO_DATE;\n    var obs = derivation.observing;\n    var i = obs.length;\n    while (i--)\n        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;\n}\nvar persistentKeys = [\"mobxGuid\", \"resetId\", \"spyListeners\", \"strictMode\", \"runId\"];\nvar MobXGlobals = (function () {\n    function MobXGlobals() {\n        this.version = 5;\n        this.trackingDerivation = null;\n        this.computationDepth = 0;\n        this.runId = 0;\n        this.mobxGuid = 0;\n        this.inBatch = 0;\n        this.pendingUnobservations = [];\n        this.pendingReactions = [];\n        this.isRunningReactions = false;\n        this.allowStateChanges = true;\n        this.strictMode = false;\n        this.resetId = 0;\n        this.spyListeners = [];\n        this.globalReactionErrorHandlers = [];\n    }\n    return MobXGlobals;\n}());\nvar globalState = new MobXGlobals();\nfunction shareGlobalState() {\n    var global = getGlobal();\n    var ownState = globalState;\n    if (global.__mobservableTrackingStack || global.__mobservableViewStack)\n        throw new Error(\"[mobx] An incompatible version of mobservable is already loaded.\");\n    if (global.__mobxGlobal && global.__mobxGlobal.version !== ownState.version)\n        throw new Error(\"[mobx] An incompatible version of mobx is already loaded.\");\n    if (global.__mobxGlobal)\n        globalState = global.__mobxGlobal;\n    else\n        global.__mobxGlobal = ownState;\n}\nfunction getGlobalState() {\n    return globalState;\n}\nfunction registerGlobals() {\n}\nfunction resetGlobalState() {\n    globalState.resetId++;\n    var defaultGlobals = new MobXGlobals();\n    for (var key in defaultGlobals)\n        if (persistentKeys.indexOf(key) === -1)\n            globalState[key] = defaultGlobals[key];\n    globalState.allowStateChanges = !globalState.strictMode;\n}\nfunction hasObservers(observable) {\n    return observable.observers && observable.observers.length > 0;\n}\nfunction getObservers(observable) {\n    return observable.observers;\n}\nfunction invariantObservers(observable) {\n    var list = observable.observers;\n    var map = observable.observersIndexes;\n    var l = list.length;\n    for (var i = 0; i < l; i++) {\n        var id = list[i].__mapid;\n        if (i) {\n            invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\");\n        }\n        else {\n            invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldnt be held in map.\");\n        }\n    }\n    invariant(list.length === 0 || Object.keys(map).length === list.length - 1, \"INTERNAL ERROR there is no junk in map\");\n}\nfunction addObserver(observable, node) {\n    var l = observable.observers.length;\n    if (l) {\n        observable.observersIndexes[node.__mapid] = l;\n    }\n    observable.observers[l] = node;\n    if (observable.lowestObserverState > node.dependenciesState)\n        observable.lowestObserverState = node.dependenciesState;\n}\nfunction removeObserver(observable, node) {\n    if (observable.observers.length === 1) {\n        observable.observers.length = 0;\n        queueForUnobservation(observable);\n    }\n    else {\n        var list = observable.observers;\n        var map_1 = observable.observersIndexes;\n        var filler = list.pop();\n        if (filler !== node) {\n            var index = map_1[node.__mapid] || 0;\n            if (index) {\n                map_1[filler.__mapid] = index;\n            }\n            else {\n                delete map_1[filler.__mapid];\n            }\n            list[index] = filler;\n        }\n        delete map_1[node.__mapid];\n    }\n}\nfunction queueForUnobservation(observable) {\n    if (!observable.isPendingUnobservation) {\n        observable.isPendingUnobservation = true;\n        globalState.pendingUnobservations.push(observable);\n    }\n}\nfunction startBatch() {\n    globalState.inBatch++;\n}\nfunction endBatch() {\n    if (--globalState.inBatch === 0) {\n        runReactions();\n        var list = globalState.pendingUnobservations;\n        for (var i = 0; i < list.length; i++) {\n            var observable_1 = list[i];\n            observable_1.isPendingUnobservation = false;\n            if (observable_1.observers.length === 0) {\n                observable_1.onBecomeUnobserved();\n            }\n        }\n        globalState.pendingUnobservations = [];\n    }\n}\nfunction reportObserved(observable) {\n    var derivation = globalState.trackingDerivation;\n    if (derivation !== null) {\n        if (derivation.runId !== observable.lastAccessedBy) {\n            observable.lastAccessedBy = derivation.runId;\n            derivation.newObserving[derivation.unboundDepsCount++] = observable;\n        }\n    }\n    else if (observable.observers.length === 0) {\n        queueForUnobservation(observable);\n    }\n}\nfunction invariantLOS(observable, msg) {\n    var min = getObservers(observable).reduce(function (a, b) { return Math.min(a, b.dependenciesState); }, 2);\n    if (min >= observable.lowestObserverState)\n        return;\n    throw new Error(\"lowestObserverState is wrong for \" + msg + \" because \" + min + \" < \" + observable.lowestObserverState);\n}\nfunction propagateChanged(observable) {\n    if (observable.lowestObserverState === IDerivationState.STALE)\n        return;\n    observable.lowestObserverState = IDerivationState.STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE)\n            d.onBecomeStale();\n        d.dependenciesState = IDerivationState.STALE;\n    }\n}\nfunction propagateChangeConfirmed(observable) {\n    if (observable.lowestObserverState === IDerivationState.STALE)\n        return;\n    observable.lowestObserverState = IDerivationState.STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)\n            d.dependenciesState = IDerivationState.STALE;\n        else if (d.dependenciesState === IDerivationState.UP_TO_DATE)\n            observable.lowestObserverState = IDerivationState.UP_TO_DATE;\n    }\n}\nfunction propagateMaybeChanged(observable) {\n    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)\n        return;\n    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {\n            d.dependenciesState = IDerivationState.POSSIBLY_STALE;\n            d.onBecomeStale();\n        }\n    }\n}\nvar Reaction = (function () {\n    function Reaction(name, onInvalidate) {\n        if (name === void 0) { name = \"Reaction@\" + getNextId(); }\n        this.name = name;\n        this.onInvalidate = onInvalidate;\n        this.observing = [];\n        this.newObserving = [];\n        this.dependenciesState = IDerivationState.NOT_TRACKING;\n        this.diffValue = 0;\n        this.runId = 0;\n        this.unboundDepsCount = 0;\n        this.__mapid = \"#\" + getNextId();\n        this.isDisposed = false;\n        this._isScheduled = false;\n        this._isTrackPending = false;\n        this._isRunning = false;\n    }\n    Reaction.prototype.onBecomeStale = function () {\n        this.schedule();\n    };\n    Reaction.prototype.schedule = function () {\n        if (!this._isScheduled) {\n            this._isScheduled = true;\n            globalState.pendingReactions.push(this);\n            runReactions();\n        }\n    };\n    Reaction.prototype.isScheduled = function () {\n        return this._isScheduled;\n    };\n    Reaction.prototype.runReaction = function () {\n        if (!this.isDisposed) {\n            startBatch();\n            this._isScheduled = false;\n            if (shouldCompute(this)) {\n                this._isTrackPending = true;\n                this.onInvalidate();\n                if (this._isTrackPending && isSpyEnabled()) {\n                    spyReport({\n                        object: this,\n                        type: \"scheduled-reaction\"\n                    });\n                }\n            }\n            endBatch();\n        }\n    };\n    Reaction.prototype.track = function (fn) {\n        startBatch();\n        var notify = isSpyEnabled();\n        var startTime;\n        if (notify) {\n            startTime = Date.now();\n            spyReportStart({\n                object: this,\n                type: \"reaction\",\n                fn: fn\n            });\n        }\n        this._isRunning = true;\n        var result = trackDerivedFunction(this, fn, undefined);\n        this._isRunning = false;\n        this._isTrackPending = false;\n        if (this.isDisposed) {\n            clearObserving(this);\n        }\n        if (isCaughtException(result))\n            this.reportExceptionInDerivation(result.cause);\n        if (notify) {\n            spyReportEnd({\n                time: Date.now() - startTime\n            });\n        }\n        endBatch();\n    };\n    Reaction.prototype.reportExceptionInDerivation = function (error) {\n        var _this = this;\n        if (this.errorHandler) {\n            this.errorHandler(error, this);\n            return;\n        }\n        var message = \"[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '\" + this;\n        var messageToUser = getMessage(\"m037\");\n        console.error(message || messageToUser, error);\n        if (isSpyEnabled()) {\n            spyReport({\n                type: \"error\",\n                message: message,\n                error: error,\n                object: this\n            });\n        }\n        globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });\n    };\n    Reaction.prototype.dispose = function () {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            if (!this._isRunning) {\n                startBatch();\n                clearObserving(this);\n                endBatch();\n            }\n        }\n    };\n    Reaction.prototype.getDisposer = function () {\n        var r = this.dispose.bind(this);\n        r.$mobx = this;\n        r.onError = registerErrorHandler;\n        return r;\n    };\n    Reaction.prototype.toString = function () {\n        return \"Reaction[\" + this.name + \"]\";\n    };\n    Reaction.prototype.whyRun = function () {\n        var observing = unique(this._isRunning ? this.newObserving : this.observing).map(function (dep) { return dep.name; });\n        return (\"\\nWhyRun? reaction '\" + this.name + \"':\\n * Status: [\" + (this.isDisposed ? \"stopped\" : this._isRunning ? \"running\" : this.isScheduled() ? \"scheduled\" : \"idle\") + \"]\\n * This reaction will re-run if any of the following observables changes:\\n    \" + joinStrings(observing) + \"\\n    \" + ((this._isRunning) ? \" (... or any observable accessed during the remainder of the current run)\" : \"\") + \"\\n\\t\" + getMessage(\"m038\") + \"\\n\");\n    };\n    return Reaction;\n}());\nfunction registerErrorHandler(handler) {\n    invariant(this && this.$mobx && isReaction(this.$mobx), \"Invalid `this`\");\n    invariant(!this.$mobx.errorHandler, \"Only one onErrorHandler can be registered\");\n    this.$mobx.errorHandler = handler;\n}\nfunction onReactionError(handler) {\n    globalState.globalReactionErrorHandlers.push(handler);\n    return function () {\n        var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n        if (idx >= 0)\n            globalState.globalReactionErrorHandlers.splice(idx, 1);\n    };\n}\nvar MAX_REACTION_ITERATIONS = 100;\nvar reactionScheduler = function (f) { return f(); };\nfunction runReactions() {\n    if (globalState.inBatch > 0 || globalState.isRunningReactions)\n        return;\n    reactionScheduler(runReactionsHelper);\n}\nfunction runReactionsHelper() {\n    globalState.isRunningReactions = true;\n    var allReactions = globalState.pendingReactions;\n    var iterations = 0;\n    while (allReactions.length > 0) {\n        if (++iterations === MAX_REACTION_ITERATIONS) {\n            console.error(\"Reaction doesn't converge to a stable state after \" + MAX_REACTION_ITERATIONS + \" iterations.\"\n                + (\" Probably there is a cycle in the reactive function: \" + allReactions[0]));\n            allReactions.splice(0);\n        }\n        var remainingReactions = allReactions.splice(0);\n        for (var i = 0, l = remainingReactions.length; i < l; i++)\n            remainingReactions[i].runReaction();\n    }\n    globalState.isRunningReactions = false;\n}\nvar isReaction = createInstanceofPredicate(\"Reaction\", Reaction);\nfunction setReactionScheduler(fn) {\n    var baseScheduler = reactionScheduler;\n    reactionScheduler = function (f) { return fn(function () { return baseScheduler(f); }); };\n}\nfunction isSpyEnabled() {\n    return !!globalState.spyListeners.length;\n}\nfunction spyReport(event) {\n    if (!globalState.spyListeners.length)\n        return;\n    var listeners = globalState.spyListeners;\n    for (var i = 0, l = listeners.length; i < l; i++)\n        listeners[i](event);\n}\nfunction spyReportStart(event) {\n    var change = objectAssign({}, event, { spyReportStart: true });\n    spyReport(change);\n}\nvar END_EVENT = { spyReportEnd: true };\nfunction spyReportEnd(change) {\n    if (change)\n        spyReport(objectAssign({}, change, END_EVENT));\n    else\n        spyReport(END_EVENT);\n}\nfunction spy(listener) {\n    globalState.spyListeners.push(listener);\n    return once(function () {\n        var idx = globalState.spyListeners.indexOf(listener);\n        if (idx !== -1)\n            globalState.spyListeners.splice(idx, 1);\n    });\n}\nfunction hasInterceptors(interceptable) {\n    return (interceptable.interceptors && interceptable.interceptors.length > 0);\n}\nfunction registerInterceptor(interceptable, handler) {\n    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);\n    interceptors.push(handler);\n    return once(function () {\n        var idx = interceptors.indexOf(handler);\n        if (idx !== -1)\n            interceptors.splice(idx, 1);\n    });\n}\nfunction interceptChange(interceptable, change) {\n    var prevU = untrackedStart();\n    try {\n        var interceptors = interceptable.interceptors;\n        if (interceptors)\n            for (var i = 0, l = interceptors.length; i < l; i++) {\n                change = interceptors[i](change);\n                invariant(!change || change.type, \"Intercept handlers should return nothing or a change object\");\n                if (!change)\n                    break;\n            }\n        return change;\n    }\n    finally {\n        untrackedEnd(prevU);\n    }\n}\nfunction hasListeners(listenable) {\n    return listenable.changeListeners && listenable.changeListeners.length > 0;\n}\nfunction registerListener(listenable, handler) {\n    var listeners = listenable.changeListeners || (listenable.changeListeners = []);\n    listeners.push(handler);\n    return once(function () {\n        var idx = listeners.indexOf(handler);\n        if (idx !== -1)\n            listeners.splice(idx, 1);\n    });\n}\nfunction notifyListeners(listenable, change) {\n    var prevU = untrackedStart();\n    var listeners = listenable.changeListeners;\n    if (!listeners)\n        return;\n    listeners = listeners.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](change);\n    }\n    untrackedEnd(prevU);\n}\nfunction asReference(value) {\n    deprecated(\"asReference is deprecated, use observable.ref instead\");\n    return observable.ref(value);\n}\nfunction asStructure(value) {\n    deprecated(\"asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead.\");\n    return observable.struct(value);\n}\nfunction asFlat(value) {\n    deprecated(\"asFlat is deprecated, use observable.shallow instead\");\n    return observable.shallow(value);\n}\nfunction asMap(data) {\n    deprecated(\"asMap is deprecated, use observable.map or observable.shallowMap instead\");\n    return observable.map(data || {});\n}\nfunction isModifierDescriptor(thing) {\n    return typeof thing === \"object\" && thing !== null && thing.isMobxModifierDescriptor === true;\n}\nfunction createModifierDescriptor(enhancer, initialValue) {\n    invariant(!isModifierDescriptor(initialValue), \"Modifiers cannot be nested\");\n    return {\n        isMobxModifierDescriptor: true,\n        initialValue: initialValue,\n        enhancer: enhancer\n    };\n}\nfunction deepEnhancer(v, _, name) {\n    if (isModifierDescriptor(v))\n        fail(\"You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it\");\n    if (isObservable(v))\n        return v;\n    if (Array.isArray(v))\n        return observable.array(v, name);\n    if (isPlainObject(v))\n        return observable.object(v, name);\n    if (isES6Map(v))\n        return observable.map(v, name);\n    return v;\n}\nfunction shallowEnhancer(v, _, name) {\n    if (isModifierDescriptor(v))\n        fail(\"You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it\");\n    if (v === undefined || v === null)\n        return v;\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v))\n        return v;\n    if (Array.isArray(v))\n        return observable.shallowArray(v, name);\n    if (isPlainObject(v))\n        return observable.shallowObject(v, name);\n    if (isES6Map(v))\n        return observable.shallowMap(v, name);\n    return fail(\"The shallow modifier / decorator can only used in combination with arrays, objects and maps\");\n}\nfunction referenceEnhancer(newValue) {\n    return newValue;\n}\nfunction deepStructEnhancer(v, oldValue, name) {\n    if (deepEqual(v, oldValue))\n        return oldValue;\n    if (isObservable(v))\n        return v;\n    if (Array.isArray(v))\n        return new ObservableArray(v, deepStructEnhancer, name);\n    if (isES6Map(v))\n        return new ObservableMap(v, deepStructEnhancer, name);\n    if (isPlainObject(v)) {\n        var res = {};\n        asObservableObject(res, name);\n        extendObservableHelper(res, deepStructEnhancer, [v]);\n        return res;\n    }\n    return v;\n}\nfunction refStructEnhancer(v, oldValue, name) {\n    if (deepEqual(v, oldValue))\n        return oldValue;\n    return v;\n}\nvar MAX_SPLICE_SIZE = 10000;\nvar safariPrototypeSetterInheritanceBug = (function () {\n    var v = false;\n    var p = {};\n    Object.defineProperty(p, \"0\", { set: function () { v = true; } });\n    Object.create(p)[\"0\"] = 1;\n    return v === false;\n})();\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0;\nvar StubArray = (function () {\n    function StubArray() {\n    }\n    return StubArray;\n}());\nStubArray.prototype = [];\nvar ObservableArrayAdministration = (function () {\n    function ObservableArrayAdministration(name, enhancer, array, owned) {\n        this.array = array;\n        this.owned = owned;\n        this.lastKnownLength = 0;\n        this.interceptors = null;\n        this.changeListeners = null;\n        this.atom = new BaseAtom(name || (\"ObservableArray@\" + getNextId()));\n        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + \"[..]\"); };\n    }\n    ObservableArrayAdministration.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately === void 0) { fireImmediately = false; }\n        if (fireImmediately) {\n            listener({\n                object: this.array,\n                type: \"splice\",\n                index: 0,\n                added: this.values.slice(),\n                addedCount: this.values.length,\n                removed: [],\n                removedCount: 0\n            });\n        }\n        return registerListener(this, listener);\n    };\n    ObservableArrayAdministration.prototype.getArrayLength = function () {\n        this.atom.reportObserved();\n        return this.values.length;\n    };\n    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {\n        if (typeof newLength !== \"number\" || newLength < 0)\n            throw new Error(\"[mobx.array] Out of range: \" + newLength);\n        var currentLength = this.values.length;\n        if (newLength === currentLength)\n            return;\n        else if (newLength > currentLength) {\n            var newItems = new Array(newLength - currentLength);\n            for (var i = 0; i < newLength - currentLength; i++)\n                newItems[i] = undefined;\n            this.spliceWithArray(currentLength, 0, newItems);\n        }\n        else\n            this.spliceWithArray(newLength, currentLength - newLength);\n    };\n    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {\n        if (oldLength !== this.lastKnownLength)\n            throw new Error(\"[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?\");\n        this.lastKnownLength += delta;\n        if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE)\n            reserveArrayBuffer(oldLength + delta + 1);\n    };\n    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {\n        var _this = this;\n        checkIfStateModificationsAreAllowed(this.atom);\n        var length = this.values.length;\n        if (index === undefined)\n            index = 0;\n        else if (index > length)\n            index = length;\n        else if (index < 0)\n            index = Math.max(0, length + index);\n        if (arguments.length === 1)\n            deleteCount = length - index;\n        else if (deleteCount === undefined || deleteCount === null)\n            deleteCount = 0;\n        else\n            deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n        if (newItems === undefined)\n            newItems = [];\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                object: this.array,\n                type: \"splice\",\n                index: index,\n                removedCount: deleteCount,\n                added: newItems\n            });\n            if (!change)\n                return EMPTY_ARRAY;\n            deleteCount = change.removedCount;\n            newItems = change.added;\n        }\n        newItems = newItems.map(function (v) { return _this.enhancer(v, undefined); });\n        var lengthDelta = newItems.length - deleteCount;\n        this.updateArrayLength(length, lengthDelta);\n        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);\n        if (deleteCount !== 0 || newItems.length !== 0)\n            this.notifyArraySplice(index, newItems, res);\n        return res;\n    };\n    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {\n        if (newItems.length < MAX_SPLICE_SIZE) {\n            return (_a = this.values).splice.apply(_a, [index, deleteCount].concat(newItems));\n        }\n        else {\n            var res = this.values.slice(index, index + deleteCount);\n            this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount));\n            return res;\n        }\n        var _a;\n    };\n    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {\n        var notifySpy = !this.owned && isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy ? {\n            object: this.array,\n            type: \"update\",\n            index: index, newValue: newValue, oldValue: oldValue\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        this.atom.reportChanged();\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {\n        var notifySpy = !this.owned && isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy ? {\n            object: this.array,\n            type: \"splice\",\n            index: index, removed: removed, added: added,\n            removedCount: removed.length,\n            addedCount: added.length\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        this.atom.reportChanged();\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    return ObservableArrayAdministration;\n}());\nvar ObservableArray = (function (_super) {\n    __extends(ObservableArray, _super);\n    function ObservableArray(initialValues, enhancer, name, owned) {\n        if (name === void 0) { name = \"ObservableArray@\" + getNextId(); }\n        if (owned === void 0) { owned = false; }\n        var _this = _super.call(this) || this;\n        var adm = new ObservableArrayAdministration(name, enhancer, _this, owned);\n        addHiddenFinalProp(_this, \"$mobx\", adm);\n        if (initialValues && initialValues.length) {\n            adm.updateArrayLength(0, initialValues.length);\n            adm.values = initialValues.map(function (v) { return enhancer(v, undefined, name + \"[..]\"); });\n            adm.notifyArraySplice(0, adm.values.slice(), EMPTY_ARRAY);\n        }\n        else {\n            adm.values = [];\n        }\n        if (safariPrototypeSetterInheritanceBug) {\n            Object.defineProperty(adm.array, \"0\", ENTRY_0);\n        }\n        return _this;\n    }\n    ObservableArray.prototype.intercept = function (handler) {\n        return this.$mobx.intercept(handler);\n    };\n    ObservableArray.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately === void 0) { fireImmediately = false; }\n        return this.$mobx.observe(listener, fireImmediately);\n    };\n    ObservableArray.prototype.clear = function () {\n        return this.splice(0);\n    };\n    ObservableArray.prototype.concat = function () {\n        var arrays = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            arrays[_i] = arguments[_i];\n        }\n        this.$mobx.atom.reportObserved();\n        return Array.prototype.concat.apply(this.peek(), arrays.map(function (a) { return isObservableArray(a) ? a.peek() : a; }));\n    };\n    ObservableArray.prototype.replace = function (newItems) {\n        return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);\n    };\n    ObservableArray.prototype.toJS = function () {\n        return this.slice();\n    };\n    ObservableArray.prototype.toJSON = function () {\n        return this.toJS();\n    };\n    ObservableArray.prototype.peek = function () {\n        return this.$mobx.values;\n    };\n    ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {\n        if (fromIndex === void 0) { fromIndex = 0; }\n        this.$mobx.atom.reportObserved();\n        var items = this.$mobx.values, l = items.length;\n        for (var i = fromIndex; i < l; i++)\n            if (predicate.call(thisArg, items[i], i, this))\n                return items[i];\n        return undefined;\n    };\n    ObservableArray.prototype.splice = function (index, deleteCount) {\n        var newItems = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            newItems[_i - 2] = arguments[_i];\n        }\n        switch (arguments.length) {\n            case 0:\n                return [];\n            case 1:\n                return this.$mobx.spliceWithArray(index);\n            case 2:\n                return this.$mobx.spliceWithArray(index, deleteCount);\n        }\n        return this.$mobx.spliceWithArray(index, deleteCount, newItems);\n    };\n    ObservableArray.prototype.spliceWithArray = function (index, deleteCount, newItems) {\n        return this.$mobx.spliceWithArray(index, deleteCount, newItems);\n    };\n    ObservableArray.prototype.push = function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i] = arguments[_i];\n        }\n        var adm = this.$mobx;\n        adm.spliceWithArray(adm.values.length, 0, items);\n        return adm.values.length;\n    };\n    ObservableArray.prototype.pop = function () {\n        return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];\n    };\n    ObservableArray.prototype.shift = function () {\n        return this.splice(0, 1)[0];\n    };\n    ObservableArray.prototype.unshift = function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i] = arguments[_i];\n        }\n        var adm = this.$mobx;\n        adm.spliceWithArray(0, 0, items);\n        return adm.values.length;\n    };\n    ObservableArray.prototype.reverse = function () {\n        this.$mobx.atom.reportObserved();\n        var clone = this.slice();\n        return clone.reverse.apply(clone, arguments);\n    };\n    ObservableArray.prototype.sort = function (compareFn) {\n        this.$mobx.atom.reportObserved();\n        var clone = this.slice();\n        return clone.sort.apply(clone, arguments);\n    };\n    ObservableArray.prototype.remove = function (value) {\n        var idx = this.$mobx.values.indexOf(value);\n        if (idx > -1) {\n            this.splice(idx, 1);\n            return true;\n        }\n        return false;\n    };\n    ObservableArray.prototype.move = function (fromIndex, toIndex) {\n        function checkIndex(index) {\n            if (index < 0) {\n                throw new Error(\"[mobx.array] Index out of bounds: \" + index + \" is negative\");\n            }\n            var length = this.$mobx.values.length;\n            if (index >= length) {\n                throw new Error(\"[mobx.array] Index out of bounds: \" + index + \" is not smaller than \" + length);\n            }\n        }\n        checkIndex.call(this, fromIndex);\n        checkIndex.call(this, toIndex);\n        if (fromIndex === toIndex) {\n            return;\n        }\n        var oldItems = this.$mobx.values;\n        var newItems;\n        if (fromIndex < toIndex) {\n            newItems = oldItems.slice(0, fromIndex).concat(oldItems.slice(fromIndex + 1, toIndex + 1), [oldItems[fromIndex]], oldItems.slice(toIndex + 1));\n        }\n        else {\n            newItems = oldItems.slice(0, toIndex).concat([oldItems[fromIndex]], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));\n        }\n        this.replace(newItems);\n    };\n    ObservableArray.prototype.toString = function () {\n        this.$mobx.atom.reportObserved();\n        return Array.prototype.toString.apply(this.$mobx.values, arguments);\n    };\n    ObservableArray.prototype.toLocaleString = function () {\n        this.$mobx.atom.reportObserved();\n        return Array.prototype.toLocaleString.apply(this.$mobx.values, arguments);\n    };\n    return ObservableArray;\n}(StubArray));\ndeclareIterator(ObservableArray.prototype, function () {\n    return arrayAsIterator(this.slice());\n});\nmakeNonEnumerable(ObservableArray.prototype, [\n    \"constructor\",\n    \"intercept\",\n    \"observe\",\n    \"clear\",\n    \"concat\",\n    \"replace\",\n    \"toJS\",\n    \"toJSON\",\n    \"peek\",\n    \"find\",\n    \"splice\",\n    \"spliceWithArray\",\n    \"push\",\n    \"pop\",\n    \"shift\",\n    \"unshift\",\n    \"reverse\",\n    \"sort\",\n    \"remove\",\n    \"move\",\n    \"toString\",\n    \"toLocaleString\"\n]);\nObject.defineProperty(ObservableArray.prototype, \"length\", {\n    enumerable: false,\n    configurable: true,\n    get: function () {\n        return this.$mobx.getArrayLength();\n    },\n    set: function (newLength) {\n        this.$mobx.setArrayLength(newLength);\n    }\n});\n[\n    \"every\",\n    \"filter\",\n    \"forEach\",\n    \"indexOf\",\n    \"join\",\n    \"lastIndexOf\",\n    \"map\",\n    \"reduce\",\n    \"reduceRight\",\n    \"slice\",\n    \"some\"\n].forEach(function (funcName) {\n    var baseFunc = Array.prototype[funcName];\n    invariant(typeof baseFunc === \"function\", \"Base function not defined on Array prototype: '\" + funcName + \"'\");\n    addHiddenProp(ObservableArray.prototype, funcName, function () {\n        this.$mobx.atom.reportObserved();\n        return baseFunc.apply(this.$mobx.values, arguments);\n    });\n});\nvar ENTRY_0 = {\n    configurable: true,\n    enumerable: false,\n    set: createArraySetter(0),\n    get: createArrayGetter(0)\n};\nfunction createArrayBufferItem(index) {\n    var set = createArraySetter(index);\n    var get = createArrayGetter(index);\n    Object.defineProperty(ObservableArray.prototype, \"\" + index, {\n        enumerable: false,\n        configurable: true,\n        set: set, get: get\n    });\n}\nfunction createArraySetter(index) {\n    return function (newValue) {\n        var adm = this.$mobx;\n        var values = adm.values;\n        if (index < values.length) {\n            checkIfStateModificationsAreAllowed(adm.atom);\n            var oldValue = values[index];\n            if (hasInterceptors(adm)) {\n                var change = interceptChange(adm, {\n                    type: \"update\",\n                    object: adm.array,\n                    index: index, newValue: newValue\n                });\n                if (!change)\n                    return;\n                newValue = change.newValue;\n            }\n            newValue = adm.enhancer(newValue, oldValue);\n            var changed = newValue !== oldValue;\n            if (changed) {\n                values[index] = newValue;\n                adm.notifyArrayChildUpdate(index, newValue, oldValue);\n            }\n        }\n        else if (index === values.length) {\n            adm.spliceWithArray(index, 0, [newValue]);\n        }\n        else\n            throw new Error(\"[mobx.array] Index out of bounds, \" + index + \" is larger than \" + values.length);\n    };\n}\nfunction createArrayGetter(index) {\n    return function () {\n        var impl = this.$mobx;\n        if (impl) {\n            if (index < impl.values.length) {\n                impl.atom.reportObserved();\n                return impl.values[index];\n            }\n            console.warn(\"[mobx.array] Attempt to read an array index (\" + index + \") that is out of bounds (\" + impl.values.length + \"). Please check length first. Out of bound indices will not be tracked by MobX\");\n        }\n        return undefined;\n    };\n}\nfunction reserveArrayBuffer(max) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++)\n        createArrayBufferItem(index);\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n}\nreserveArrayBuffer(1000);\nvar isObservableArrayAdministration = createInstanceofPredicate(\"ObservableArrayAdministration\", ObservableArrayAdministration);\nfunction isObservableArray(thing) {\n    return isObject(thing) && isObservableArrayAdministration(thing.$mobx);\n}\nvar ObservableMapMarker = {};\nvar ObservableMap = (function () {\n    function ObservableMap(initialData, enhancer, name) {\n        if (enhancer === void 0) { enhancer = deepEnhancer; }\n        if (name === void 0) { name = \"ObservableMap@\" + getNextId(); }\n        this.enhancer = enhancer;\n        this.name = name;\n        this.$mobx = ObservableMapMarker;\n        this._data = {};\n        this._hasMap = {};\n        this._keys = new ObservableArray(undefined, referenceEnhancer, this.name + \".keys()\", true);\n        this.interceptors = null;\n        this.changeListeners = null;\n        this.merge(initialData);\n    }\n    ObservableMap.prototype._has = function (key) {\n        return typeof this._data[key] !== \"undefined\";\n    };\n    ObservableMap.prototype.has = function (key) {\n        if (!this.isValidKey(key))\n            return false;\n        key = \"\" + key;\n        if (this._hasMap[key])\n            return this._hasMap[key].get();\n        return this._updateHasMapEntry(key, false).get();\n    };\n    ObservableMap.prototype.set = function (key, value) {\n        this.assertValidKey(key);\n        key = \"\" + key;\n        var hasKey = this._has(key);\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                type: hasKey ? \"update\" : \"add\",\n                object: this,\n                newValue: value,\n                name: key\n            });\n            if (!change)\n                return this;\n            value = change.newValue;\n        }\n        if (hasKey) {\n            this._updateValue(key, value);\n        }\n        else {\n            this._addValue(key, value);\n        }\n        return this;\n    };\n    ObservableMap.prototype.delete = function (key) {\n        var _this = this;\n        this.assertValidKey(key);\n        key = \"\" + key;\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                type: \"delete\",\n                object: this,\n                name: key\n            });\n            if (!change)\n                return false;\n        }\n        if (this._has(key)) {\n            var notifySpy = isSpyEnabled();\n            var notify = hasListeners(this);\n            var change = notify || notifySpy ? {\n                type: \"delete\",\n                object: this,\n                oldValue: this._data[key].value,\n                name: key\n            } : null;\n            if (notifySpy)\n                spyReportStart(change);\n            runInTransaction(function () {\n                _this._keys.remove(key);\n                _this._updateHasMapEntry(key, false);\n                var observable = _this._data[key];\n                observable.setNewValue(undefined);\n                _this._data[key] = undefined;\n            });\n            if (notify)\n                notifyListeners(this, change);\n            if (notifySpy)\n                spyReportEnd();\n            return true;\n        }\n        return false;\n    };\n    ObservableMap.prototype._updateHasMapEntry = function (key, value) {\n        var entry = this._hasMap[key];\n        if (entry) {\n            entry.setNewValue(value);\n        }\n        else {\n            entry = this._hasMap[key] = new ObservableValue(value, referenceEnhancer, this.name + \".\" + key + \"?\", false);\n        }\n        return entry;\n    };\n    ObservableMap.prototype._updateValue = function (name, newValue) {\n        var observable = this._data[name];\n        newValue = observable.prepareNewValue(newValue);\n        if (newValue !== UNCHANGED) {\n            var notifySpy = isSpyEnabled();\n            var notify = hasListeners(this);\n            var change = notify || notifySpy ? {\n                type: \"update\",\n                object: this,\n                oldValue: observable.value,\n                name: name, newValue: newValue\n            } : null;\n            if (notifySpy)\n                spyReportStart(change);\n            observable.setNewValue(newValue);\n            if (notify)\n                notifyListeners(this, change);\n            if (notifySpy)\n                spyReportEnd();\n        }\n    };\n    ObservableMap.prototype._addValue = function (name, newValue) {\n        var _this = this;\n        runInTransaction(function () {\n            var observable = _this._data[name] = new ObservableValue(newValue, _this.enhancer, _this.name + \".\" + name, false);\n            newValue = observable.value;\n            _this._updateHasMapEntry(name, true);\n            _this._keys.push(name);\n        });\n        var notifySpy = isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy ? {\n            type: \"add\",\n            object: this,\n            name: name, newValue: newValue\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    ObservableMap.prototype.get = function (key) {\n        key = \"\" + key;\n        if (this.has(key))\n            return this._data[key].get();\n        return undefined;\n    };\n    ObservableMap.prototype.keys = function () {\n        return arrayAsIterator(this._keys.slice());\n    };\n    ObservableMap.prototype.values = function () {\n        return arrayAsIterator(this._keys.map(this.get, this));\n    };\n    ObservableMap.prototype.entries = function () {\n        var _this = this;\n        return arrayAsIterator(this._keys.map(function (key) { return [key, _this.get(key)]; }));\n    };\n    ObservableMap.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        this.keys().forEach(function (key) { return callback.call(thisArg, _this.get(key), key, _this); });\n    };\n    ObservableMap.prototype.merge = function (other) {\n        var _this = this;\n        if (isObservableMap(other)) {\n            other = other.toJS();\n        }\n        runInTransaction(function () {\n            if (isPlainObject(other))\n                Object.keys(other).forEach(function (key) { return _this.set(key, other[key]); });\n            else if (Array.isArray(other))\n                other.forEach(function (_a) {\n                    var key = _a[0], value = _a[1];\n                    return _this.set(key, value);\n                });\n            else if (isES6Map(other))\n                other.forEach(function (value, key) { return _this.set(key, value); });\n            else if (other !== null && other !== undefined)\n                fail(\"Cannot initialize map from \" + other);\n        });\n        return this;\n    };\n    ObservableMap.prototype.clear = function () {\n        var _this = this;\n        runInTransaction(function () {\n            untracked(function () {\n                _this.keys().forEach(_this.delete, _this);\n            });\n        });\n    };\n    ObservableMap.prototype.replace = function (values) {\n        var _this = this;\n        runInTransaction(function () {\n            _this.clear();\n            _this.merge(values);\n        });\n        return this;\n    };\n    Object.defineProperty(ObservableMap.prototype, \"size\", {\n        get: function () {\n            return this._keys.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ObservableMap.prototype.toJS = function () {\n        var _this = this;\n        var res = {};\n        this.keys().forEach(function (key) { return res[key] = _this.get(key); });\n        return res;\n    };\n    ObservableMap.prototype.toJSON = function () {\n        return this.toJS();\n    };\n    ObservableMap.prototype.isValidKey = function (key) {\n        if (key === null || key === undefined)\n            return false;\n        if (typeof key === \"string\" || typeof key === \"number\" || typeof key === \"boolean\")\n            return true;\n        return false;\n    };\n    ObservableMap.prototype.assertValidKey = function (key) {\n        if (!this.isValidKey(key))\n            throw new Error(\"[mobx.map] Invalid key: '\" + key + \"', only strings, numbers and booleans are accepted as key in observable maps.\");\n    };\n    ObservableMap.prototype.toString = function () {\n        var _this = this;\n        return this.name + \"[{ \" + this.keys().map(function (key) { return key + \": \" + (\"\" + _this.get(key)); }).join(\", \") + \" }]\";\n    };\n    ObservableMap.prototype.observe = function (listener, fireImmediately) {\n        invariant(fireImmediately !== true, getMessage(\"m033\"));\n        return registerListener(this, listener);\n    };\n    ObservableMap.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    return ObservableMap;\n}());\ndeclareIterator(ObservableMap.prototype, function () {\n    return this.entries();\n});\nfunction map(initialValues) {\n    deprecated(\"`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead\");\n    return observable.map(initialValues);\n}\nvar isObservableMap = createInstanceofPredicate(\"ObservableMap\", ObservableMap);\nvar ObservableObjectAdministration = (function () {\n    function ObservableObjectAdministration(target, name) {\n        this.target = target;\n        this.name = name;\n        this.values = {};\n        this.changeListeners = null;\n        this.interceptors = null;\n    }\n    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {\n        invariant(fireImmediately !== true, \"`observe` doesn't support the fire immediately property for observable objects.\");\n        return registerListener(this, callback);\n    };\n    ObservableObjectAdministration.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    return ObservableObjectAdministration;\n}());\nfunction asObservableObject(target, name) {\n    if (isObservableObject(target))\n        return target.$mobx;\n    invariant(Object.isExtensible(target), getMessage(\"m035\"));\n    if (!isPlainObject(target))\n        name = (target.constructor.name || \"ObservableObject\") + \"@\" + getNextId();\n    if (!name)\n        name = \"ObservableObject@\" + getNextId();\n    var adm = new ObservableObjectAdministration(target, name);\n    addHiddenFinalProp(target, \"$mobx\", adm);\n    return adm;\n}\nfunction defineObservablePropertyFromDescriptor(adm, propName, descriptor, defaultEnhancer) {\n    if (adm.values[propName]) {\n        invariant(\"value\" in descriptor, \"The property \" + propName + \" in \" + adm.name + \" is already observable, cannot redefine it as computed property\");\n        adm.target[propName] = descriptor.value;\n        return;\n    }\n    if (\"value\" in descriptor) {\n        if (isModifierDescriptor(descriptor.value)) {\n            var modifierDescriptor = descriptor.value;\n            defineObservableProperty(adm, propName, modifierDescriptor.initialValue, modifierDescriptor.enhancer);\n        }\n        else if (isAction(descriptor.value) && descriptor.value.autoBind === true) {\n            defineBoundAction(adm.target, propName, descriptor.value.originalFn);\n        }\n        else if (isComputedValue(descriptor.value)) {\n            defineComputedPropertyFromComputedValue(adm, propName, descriptor.value);\n        }\n        else {\n            defineObservableProperty(adm, propName, descriptor.value, defaultEnhancer);\n        }\n    }\n    else {\n        defineComputedProperty(adm, propName, descriptor.get, descriptor.set, false, true);\n    }\n}\nfunction defineObservableProperty(adm, propName, newValue, enhancer) {\n    assertPropertyConfigurable(adm.target, propName);\n    if (hasInterceptors(adm)) {\n        var change = interceptChange(adm, {\n            object: adm.target,\n            name: propName,\n            type: \"add\",\n            newValue: newValue\n        });\n        if (!change)\n            return;\n        newValue = change.newValue;\n    }\n    var observable = adm.values[propName] = new ObservableValue(newValue, enhancer, adm.name + \".\" + propName, false);\n    newValue = observable.value;\n    Object.defineProperty(adm.target, propName, generateObservablePropConfig(propName));\n    notifyPropertyAddition(adm, adm.target, propName, newValue);\n}\nfunction defineComputedProperty(adm, propName, getter, setter, compareStructural, asInstanceProperty) {\n    if (asInstanceProperty)\n        assertPropertyConfigurable(adm.target, propName);\n    adm.values[propName] = new ComputedValue(getter, adm.target, compareStructural, adm.name + \".\" + propName, setter);\n    if (asInstanceProperty) {\n        Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));\n    }\n}\nfunction defineComputedPropertyFromComputedValue(adm, propName, computedValue) {\n    var name = adm.name + \".\" + propName;\n    computedValue.name = name;\n    if (!computedValue.scope)\n        computedValue.scope = adm.target;\n    adm.values[propName] = computedValue;\n    Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));\n}\nvar observablePropertyConfigs = {};\nvar computedPropertyConfigs = {};\nfunction generateObservablePropConfig(propName) {\n    return observablePropertyConfigs[propName] || (observablePropertyConfigs[propName] = {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            return this.$mobx.values[propName].get();\n        },\n        set: function (v) {\n            setPropertyValue(this, propName, v);\n        }\n    });\n}\nfunction generateComputedPropConfig(propName) {\n    return computedPropertyConfigs[propName] || (computedPropertyConfigs[propName] = {\n        configurable: true,\n        enumerable: false,\n        get: function () {\n            return this.$mobx.values[propName].get();\n        },\n        set: function (v) {\n            return this.$mobx.values[propName].set(v);\n        }\n    });\n}\nfunction setPropertyValue(instance, name, newValue) {\n    var adm = instance.$mobx;\n    var observable = adm.values[name];\n    if (hasInterceptors(adm)) {\n        var change = interceptChange(adm, {\n            type: \"update\",\n            object: instance,\n            name: name, newValue: newValue\n        });\n        if (!change)\n            return;\n        newValue = change.newValue;\n    }\n    newValue = observable.prepareNewValue(newValue);\n    if (newValue !== UNCHANGED) {\n        var notify = hasListeners(adm);\n        var notifySpy = isSpyEnabled();\n        var change = notify || notifySpy ? {\n            type: \"update\",\n            object: instance,\n            oldValue: observable.value,\n            name: name, newValue: newValue\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        observable.setNewValue(newValue);\n        if (notify)\n            notifyListeners(adm, change);\n        if (notifySpy)\n            spyReportEnd();\n    }\n}\nfunction notifyPropertyAddition(adm, object, name, newValue) {\n    var notify = hasListeners(adm);\n    var notifySpy = isSpyEnabled();\n    var change = notify || notifySpy ? {\n        type: \"add\",\n        object: object, name: name, newValue: newValue\n    } : null;\n    if (notifySpy)\n        spyReportStart(change);\n    if (notify)\n        notifyListeners(adm, change);\n    if (notifySpy)\n        spyReportEnd();\n}\nvar isObservableObjectAdministration = createInstanceofPredicate(\"ObservableObjectAdministration\", ObservableObjectAdministration);\nfunction isObservableObject(thing) {\n    if (isObject(thing)) {\n        runLazyInitializers(thing);\n        return isObservableObjectAdministration(thing.$mobx);\n    }\n    return false;\n}\nvar UNCHANGED = {};\nvar ObservableValue = (function (_super) {\n    __extends(ObservableValue, _super);\n    function ObservableValue(value, enhancer, name, notifySpy) {\n        if (name === void 0) { name = \"ObservableValue@\" + getNextId(); }\n        if (notifySpy === void 0) { notifySpy = true; }\n        var _this = _super.call(this, name) || this;\n        _this.enhancer = enhancer;\n        _this.hasUnreportedChange = false;\n        _this.value = enhancer(value, undefined, name);\n        if (notifySpy && isSpyEnabled()) {\n            spyReport({ type: \"create\", object: _this, newValue: _this.value });\n        }\n        return _this;\n    }\n    ObservableValue.prototype.set = function (newValue) {\n        var oldValue = this.value;\n        newValue = this.prepareNewValue(newValue);\n        if (newValue !== UNCHANGED) {\n            var notifySpy = isSpyEnabled();\n            if (notifySpy) {\n                spyReportStart({\n                    type: \"update\",\n                    object: this,\n                    newValue: newValue, oldValue: oldValue\n                });\n            }\n            this.setNewValue(newValue);\n            if (notifySpy)\n                spyReportEnd();\n        }\n    };\n    ObservableValue.prototype.prepareNewValue = function (newValue) {\n        checkIfStateModificationsAreAllowed(this);\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, { object: this, type: \"update\", newValue: newValue });\n            if (!change)\n                return UNCHANGED;\n            newValue = change.newValue;\n        }\n        newValue = this.enhancer(newValue, this.value, this.name);\n        return this.value !== newValue\n            ? newValue\n            : UNCHANGED;\n    };\n    ObservableValue.prototype.setNewValue = function (newValue) {\n        var oldValue = this.value;\n        this.value = newValue;\n        this.reportChanged();\n        if (hasListeners(this)) {\n            notifyListeners(this, {\n                type: \"update\",\n                object: this,\n                newValue: newValue,\n                oldValue: oldValue\n            });\n        }\n    };\n    ObservableValue.prototype.get = function () {\n        this.reportObserved();\n        return this.value;\n    };\n    ObservableValue.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    ObservableValue.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately)\n            listener({\n                object: this,\n                type: \"update\",\n                newValue: this.value,\n                oldValue: undefined\n            });\n        return registerListener(this, listener);\n    };\n    ObservableValue.prototype.toJSON = function () {\n        return this.get();\n    };\n    ObservableValue.prototype.toString = function () {\n        return this.name + \"[\" + this.value + \"]\";\n    };\n    ObservableValue.prototype.valueOf = function () {\n        return toPrimitive(this.get());\n    };\n    return ObservableValue;\n}(BaseAtom));\nObservableValue.prototype[primitiveSymbol()] = ObservableValue.prototype.valueOf;\nvar isObservableValue = createInstanceofPredicate(\"ObservableValue\", ObservableValue);\nfunction getAtom(thing, property) {\n    if (typeof thing === \"object\" && thing !== null) {\n        if (isObservableArray(thing)) {\n            invariant(property === undefined, getMessage(\"m036\"));\n            return thing.$mobx.atom;\n        }\n        if (isObservableMap(thing)) {\n            var anyThing = thing;\n            if (property === undefined)\n                return getAtom(anyThing._keys);\n            var observable_2 = anyThing._data[property] || anyThing._hasMap[property];\n            invariant(!!observable_2, \"the entry '\" + property + \"' does not exist in the observable map '\" + getDebugName(thing) + \"'\");\n            return observable_2;\n        }\n        runLazyInitializers(thing);\n        if (isObservableObject(thing)) {\n            if (!property)\n                return fail(\"please specify a property\");\n            var observable_3 = thing.$mobx.values[property];\n            invariant(!!observable_3, \"no observable property '\" + property + \"' found on the observable object '\" + getDebugName(thing) + \"'\");\n            return observable_3;\n        }\n        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n            return thing;\n        }\n    }\n    else if (typeof thing === \"function\") {\n        if (isReaction(thing.$mobx)) {\n            return thing.$mobx;\n        }\n    }\n    return fail(\"Cannot obtain atom from \" + thing);\n}\nfunction getAdministration(thing, property) {\n    invariant(thing, \"Expecting some object\");\n    if (property !== undefined)\n        return getAdministration(getAtom(thing, property));\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))\n        return thing;\n    if (isObservableMap(thing))\n        return thing;\n    runLazyInitializers(thing);\n    if (thing.$mobx)\n        return thing.$mobx;\n    invariant(false, \"Cannot obtain administration from \" + thing);\n}\nfunction getDebugName(thing, property) {\n    var named;\n    if (property !== undefined)\n        named = getAtom(thing, property);\n    else if (isObservableObject(thing) || isObservableMap(thing))\n        named = getAdministration(thing);\n    else\n        named = getAtom(thing);\n    return named.name;\n}\nfunction createClassPropertyDecorator(onInitialize, get, set, enumerable, allowCustomArguments) {\n    function classPropertyDecorator(target, key, descriptor, customArgs, argLen) {\n        if (argLen === void 0) { argLen = 0; }\n        invariant(allowCustomArguments || quacksLikeADecorator(arguments), \"This function is a decorator, but it wasn't invoked like a decorator\");\n        if (!descriptor) {\n            var newDescriptor = {\n                enumerable: enumerable,\n                configurable: true,\n                get: function () {\n                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true)\n                        typescriptInitializeProperty(this, key, undefined, onInitialize, customArgs, descriptor);\n                    return get.call(this, key);\n                },\n                set: function (v) {\n                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) {\n                        typescriptInitializeProperty(this, key, v, onInitialize, customArgs, descriptor);\n                    }\n                    else {\n                        set.call(this, key, v);\n                    }\n                }\n            };\n            if (arguments.length < 3 || arguments.length === 5 && argLen < 3) {\n                Object.defineProperty(target, key, newDescriptor);\n            }\n            return newDescriptor;\n        }\n        else {\n            if (!hasOwnProperty(target, \"__mobxLazyInitializers\")) {\n                addHiddenProp(target, \"__mobxLazyInitializers\", (target.__mobxLazyInitializers && target.__mobxLazyInitializers.slice()) || []);\n            }\n            var value_1 = descriptor.value, initializer_1 = descriptor.initializer;\n            target.__mobxLazyInitializers.push(function (instance) {\n                onInitialize(instance, key, (initializer_1 ? initializer_1.call(instance) : value_1), customArgs, descriptor);\n            });\n            return {\n                enumerable: enumerable, configurable: true,\n                get: function () {\n                    if (this.__mobxDidRunLazyInitializers !== true)\n                        runLazyInitializers(this);\n                    return get.call(this, key);\n                },\n                set: function (v) {\n                    if (this.__mobxDidRunLazyInitializers !== true)\n                        runLazyInitializers(this);\n                    set.call(this, key, v);\n                }\n            };\n        }\n    }\n    if (allowCustomArguments) {\n        return function () {\n            if (quacksLikeADecorator(arguments))\n                return classPropertyDecorator.apply(null, arguments);\n            var outerArgs = arguments;\n            var argLen = arguments.length;\n            return function (target, key, descriptor) { return classPropertyDecorator(target, key, descriptor, outerArgs, argLen); };\n        };\n    }\n    return classPropertyDecorator;\n}\nfunction typescriptInitializeProperty(instance, key, v, onInitialize, customArgs, baseDescriptor) {\n    if (!hasOwnProperty(instance, \"__mobxInitializedProps\"))\n        addHiddenProp(instance, \"__mobxInitializedProps\", {});\n    instance.__mobxInitializedProps[key] = true;\n    onInitialize(instance, key, v, customArgs, baseDescriptor);\n}\nfunction runLazyInitializers(instance) {\n    if (instance.__mobxDidRunLazyInitializers === true)\n        return;\n    if (instance.__mobxLazyInitializers) {\n        addHiddenProp(instance, \"__mobxDidRunLazyInitializers\", true);\n        instance.__mobxDidRunLazyInitializers && instance.__mobxLazyInitializers.forEach(function (initializer) { return initializer(instance); });\n    }\n}\nfunction quacksLikeADecorator(args) {\n    return (args.length === 2 || args.length === 3) && typeof args[1] === \"string\";\n}\nfunction iteratorSymbol() {\n    return (typeof Symbol === \"function\" && Symbol.iterator) || \"@@iterator\";\n}\nvar IS_ITERATING_MARKER = \"__$$iterating\";\nfunction arrayAsIterator(array) {\n    invariant(array[IS_ITERATING_MARKER] !== true, \"Illegal state: cannot recycle array as iterator\");\n    addHiddenFinalProp(array, IS_ITERATING_MARKER, true);\n    var idx = -1;\n    addHiddenFinalProp(array, \"next\", function next() {\n        idx++;\n        return {\n            done: idx >= this.length,\n            value: idx < this.length ? this[idx] : undefined\n        };\n    });\n    return array;\n}\nfunction declareIterator(prototType, iteratorFactory) {\n    addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);\n}\nvar messages = {\n    \"m001\": \"It is not allowed to assign new values to @action fields\",\n    \"m002\": \"`runInAction` expects a function\",\n    \"m003\": \"`runInAction` expects a function without arguments\",\n    \"m004\": \"autorun expects a function\",\n    \"m005\": \"Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.\",\n    \"m006\": \"Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.\",\n    \"m007\": \"reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object\",\n    \"m008\": \"wrapping reaction expression in `asReference` is no longer supported, use options object instead\",\n    \"m009\": \"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.\",\n    \"m010\": \"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'\",\n    \"m011\": \"First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments\",\n    \"m012\": \"computed takes one or two arguments if used as function\",\n    \"m013\": \"[mobx.expr] 'expr' should only be used inside other reactive functions.\",\n    \"m014\": \"extendObservable expected 2 or more arguments\",\n    \"m015\": \"extendObservable expects an object as first argument\",\n    \"m016\": \"extendObservable should not be used on maps, use map.merge instead\",\n    \"m017\": \"all arguments of extendObservable should be objects\",\n    \"m018\": \"extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540\",\n    \"m019\": \"[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\",\n    \"m020\": \"modifiers can only be used for individual object properties\",\n    \"m021\": \"observable expects zero or one arguments\",\n    \"m022\": \"@observable can not be used on getters, use @computed instead\",\n    \"m023\": \"Using `transaction` is deprecated, use `runInAction` or `(@)action` instead.\",\n    \"m024\": \"whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.\",\n    \"m025\": \"whyRun can only be used on reactions and computed values\",\n    \"m026\": \"`action` can only be invoked on functions\",\n    \"m028\": \"It is not allowed to set `useStrict` when a derivation is running\",\n    \"m029\": \"INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row\",\n    \"m030a\": \"Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: \",\n    \"m030b\": \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: \",\n    \"m031\": \"Computed values are not allowed to not cause side effects by changing observables that are already being observed. Tried to modify: \",\n    \"m032\": \"* This computation is suspended (not in use by any reaction) and won't run automatically.\\n\tDidn't expect this computation to be suspended at this point?\\n\t  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\\n\t  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).\",\n    \"m033\": \"`observe` doesn't support the fire immediately property for observable maps.\",\n    \"m034\": \"`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead\",\n    \"m035\": \"Cannot make the designated object observable; it is not extensible\",\n    \"m036\": \"It is not possible to get index atoms from arrays\",\n    \"m037\": \"Hi there! I'm sorry you have just run into an exception.\\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\\n\\nHowever, more interesting is the actual stack trace of the error itself.\\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\\nSee `error.stack` property, or press the very subtle \\\"(...)\\\" link you see near the console.error message that probably brought you here.\\nThat stack is more interesting than the stack of this console.error itself.\\n\\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error(\\\"Oops\\\")` instead of `throw \\\"Oops\\\"`,\\nbecause the javascript environment will only preserve the original stack trace in the first form.\\n\\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling \\\"Pause on caught exception\\\".\\n(Note that it might pause on many other, unrelated exception as well).\\n\\nIf that all doesn't help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\\n\",\n    \"m038\": \"Missing items in this list?\\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\\n\"\n};\nfunction getMessage(id) {\n    return messages[id];\n}\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nfunction getGlobal() {\n    return global;\n}\nfunction getNextId() {\n    return ++globalState.mobxGuid;\n}\nfunction fail(message, thing) {\n    invariant(false, message, thing);\n    throw \"X\";\n}\nfunction invariant(check, message, thing) {\n    if (!check)\n        throw new Error(\"[mobx] Invariant failed: \" + message + (thing ? \" in '\" + thing + \"'\" : \"\"));\n}\nvar deprecatedMessages = [];\nfunction deprecated(msg) {\n    if (deprecatedMessages.indexOf(msg) !== -1)\n        return false;\n    deprecatedMessages.push(msg);\n    console.error(\"[mobx] Deprecated: \" + msg);\n    return true;\n}\nfunction once(func) {\n    var invoked = false;\n    return function () {\n        if (invoked)\n            return;\n        invoked = true;\n        return func.apply(this, arguments);\n    };\n}\nvar noop = function () { };\nfunction unique(list) {\n    var res = [];\n    list.forEach(function (item) {\n        if (res.indexOf(item) === -1)\n            res.push(item);\n    });\n    return res;\n}\nfunction joinStrings(things, limit, separator) {\n    if (limit === void 0) { limit = 100; }\n    if (separator === void 0) { separator = \" - \"; }\n    if (!things)\n        return \"\";\n    var sliced = things.slice(0, limit);\n    return \"\" + sliced.join(separator) + (things.length > limit ? \" (... and \" + (things.length - limit) + \"more)\" : \"\");\n}\nfunction isObject(value) {\n    return value !== null && typeof value === \"object\";\n}\nfunction isPlainObject(value) {\n    if (value === null || typeof value !== \"object\")\n        return false;\n    var proto = Object.getPrototypeOf(value);\n    return proto === Object.prototype || proto === null;\n}\nfunction objectAssign() {\n    var res = arguments[0];\n    for (var i = 1, l = arguments.length; i < l; i++) {\n        var source = arguments[i];\n        for (var key in source)\n            if (hasOwnProperty(source, key)) {\n                res[key] = source[key];\n            }\n    }\n    return res;\n}\nfunction valueDidChange(compareStructural, oldValue, newValue) {\n    if (typeof oldValue === 'number' && isNaN(oldValue)) {\n        return typeof newValue !== 'number' || !isNaN(newValue);\n    }\n    return compareStructural\n        ? !deepEqual(oldValue, newValue)\n        : oldValue !== newValue;\n}\nvar prototypeHasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(object, propName) {\n    return prototypeHasOwnProperty.call(object, propName);\n}\nfunction makeNonEnumerable(object, propNames) {\n    for (var i = 0; i < propNames.length; i++) {\n        addHiddenProp(object, propNames[i], object[propNames[i]]);\n    }\n}\nfunction addHiddenProp(object, propName, value) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value: value\n    });\n}\nfunction addHiddenFinalProp(object, propName, value) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value: value\n    });\n}\nfunction isPropertyConfigurable(object, prop) {\n    var descriptor = Object.getOwnPropertyDescriptor(object, prop);\n    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);\n}\nfunction assertPropertyConfigurable(object, prop) {\n    invariant(isPropertyConfigurable(object, prop), \"Cannot make property '\" + prop + \"' observable, it is not configurable and writable in the target object\");\n}\nfunction getEnumerableKeys(obj) {\n    var res = [];\n    for (var key in obj)\n        res.push(key);\n    return res;\n}\nfunction deepEqual(a, b) {\n    if (a === null && b === null)\n        return true;\n    if (a === undefined && b === undefined)\n        return true;\n    if (typeof a !== \"object\")\n        return a === b;\n    var aIsArray = isArrayLike(a);\n    var aIsMap = isMapLike(a);\n    if (aIsArray !== isArrayLike(b)) {\n        return false;\n    }\n    else if (aIsMap !== isMapLike(b)) {\n        return false;\n    }\n    else if (aIsArray) {\n        if (a.length !== b.length)\n            return false;\n        for (var i = a.length - 1; i >= 0; i--)\n            if (!deepEqual(a[i], b[i]))\n                return false;\n        return true;\n    }\n    else if (aIsMap) {\n        if (a.size !== b.size)\n            return false;\n        var equals_1 = true;\n        a.forEach(function (value, key) {\n            equals_1 = equals_1 && deepEqual(b.get(key), value);\n        });\n        return equals_1;\n    }\n    else if (typeof a === \"object\" && typeof b === \"object\") {\n        if (a === null || b === null)\n            return false;\n        if (isMapLike(a) && isMapLike(b)) {\n            if (a.size !== b.size)\n                return false;\n            return deepEqual(observable.shallowMap(a).entries(), observable.shallowMap(b).entries());\n        }\n        if (getEnumerableKeys(a).length !== getEnumerableKeys(b).length)\n            return false;\n        for (var prop in a) {\n            if (!(prop in b))\n                return false;\n            if (!deepEqual(a[prop], b[prop]))\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\nfunction createInstanceofPredicate(name, clazz) {\n    var propName = \"isMobX\" + name;\n    clazz.prototype[propName] = true;\n    return function (x) {\n        return isObject(x) && x[propName] === true;\n    };\n}\nfunction isArrayLike(x) {\n    return Array.isArray(x) || isObservableArray(x);\n}\nfunction isMapLike(x) {\n    return isES6Map(x) || isObservableMap(x);\n}\nfunction isES6Map(thing) {\n    if (getGlobal().Map !== undefined && thing instanceof getGlobal().Map)\n        return true;\n    return false;\n}\nfunction primitiveSymbol() {\n    return (typeof Symbol === \"function\" && Symbol.toPrimitive) || \"@@toPrimitive\";\n}\nfunction toPrimitive(value) {\n    return value === null ? null : typeof value === \"object\" ? (\"\" + value) : value;\n}\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)(module), __webpack_require__(1)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = __webpack_require__(0);\nvar Something = (function () {\n    function Something() {\n        this.foo = 'empty';\n    }\n    return Something;\n}());\n__decorate([\n    mobx_1.observable\n], Something.prototype, \"foo\", void 0);\nvar s = new Something();\nmobx_1.reaction(function () { return s.foo; }, function () { return console.log('foo changed to', s.foo); });\nfor (var _i = 0, _a = Array(100); _i < _a.length; _i++) {\n    var i = _a[_i];\n    s.foo = Math.random().toString(36).substring(3);\n}\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// main.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fadd3c1c1834b42112f7","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nregisterGlobals();\nexport { Atom, BaseAtom };\nexport { Reaction };\nexport { untracked, IDerivationState };\nexport { useStrict, isStrictModeEnabled };\nexport { spy };\nexport { asReference, asFlat, asStructure, asMap };\nexport { isModifierDescriptor };\nexport { isObservableObject };\nexport { isObservableValue as isBoxedObservable };\nexport { isObservableArray };\nexport { ObservableMap, isObservableMap, map };\nexport { transaction };\nexport { observable, IObservableFactories };\nexport { computed };\nexport { isObservable };\nexport { isComputed };\nexport { extendObservable, extendShallowObservable };\nexport { observe };\nexport { intercept };\nexport { autorun, autorunAsync, when, reaction };\nexport { action, isAction, runInAction };\nexport { expr };\nexport { toJS };\nexport { createTransformer };\nexport { whyRun };\nexport { isArrayLike };\nexport var extras = {\n    allowStateChanges: allowStateChanges,\n    deepEqual: deepEqual,\n    getAtom: getAtom,\n    getDebugName: getDebugName,\n    getDependencyTree: getDependencyTree,\n    getAdministration: getAdministration,\n    getGlobalState: getGlobalState,\n    getObserverTree: getObserverTree,\n    isComputingDerivation: isComputingDerivation,\n    isSpyEnabled: isSpyEnabled,\n    onReactionError: onReactionError,\n    resetGlobalState: resetGlobalState,\n    shareGlobalState: shareGlobalState,\n    spyReport: spyReport,\n    spyReportEnd: spyReportEnd,\n    spyReportStart: spyReportStart,\n    setReactionScheduler: setReactionScheduler\n};\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx(module.exports);\n}\nmodule.exports.default = module.exports;\nvar actionFieldDecorator = createClassPropertyDecorator(function (target, key, value, args, originalDescriptor) {\n    var actionName = (args && args.length === 1) ? args[0] : (value.name || key || \"<unnamed action>\");\n    var wrappedAction = action(actionName, value);\n    addHiddenProp(target, key, wrappedAction);\n}, function (key) {\n    return this[key];\n}, function () {\n    invariant(false, getMessage(\"m001\"));\n}, false, true);\nvar boundActionDecorator = createClassPropertyDecorator(function (target, key, value) {\n    defineBoundAction(target, key, value);\n}, function (key) {\n    return this[key];\n}, function () {\n    invariant(false, getMessage(\"m001\"));\n}, false, false);\nvar action = function action(arg1, arg2, arg3, arg4) {\n    if (arguments.length === 1 && typeof arg1 === \"function\")\n        return createAction(arg1.name || \"<unnamed action>\", arg1);\n    if (arguments.length === 2 && typeof arg2 === \"function\")\n        return createAction(arg1, arg2);\n    if (arguments.length === 1 && typeof arg1 === \"string\")\n        return namedActionDecorator(arg1);\n    return namedActionDecorator(arg2).apply(null, arguments);\n};\naction.bound = function boundAction(arg1, arg2, arg3) {\n    if (typeof arg1 === \"function\") {\n        var action_1 = createAction(\"<not yet bound action>\", arg1);\n        action_1.autoBind = true;\n        return action_1;\n    }\n    return boundActionDecorator.apply(null, arguments);\n};\nfunction namedActionDecorator(name) {\n    return function (target, prop, descriptor) {\n        if (descriptor && typeof descriptor.value === \"function\") {\n            descriptor.value = createAction(name, descriptor.value);\n            descriptor.enumerable = false;\n            descriptor.configurable = true;\n            return descriptor;\n        }\n        return actionFieldDecorator(name).apply(this, arguments);\n    };\n}\nfunction runInAction(arg1, arg2, arg3) {\n    var actionName = typeof arg1 === \"string\" ? arg1 : arg1.name || \"<unnamed action>\";\n    var fn = typeof arg1 === \"function\" ? arg1 : arg2;\n    var scope = typeof arg1 === \"function\" ? arg2 : arg3;\n    invariant(typeof fn === \"function\", getMessage(\"m002\"));\n    invariant(fn.length === 0, getMessage(\"m003\"));\n    invariant(typeof actionName === \"string\" && actionName.length > 0, \"actions should have valid names, got: '\" + actionName + \"'\");\n    return executeAction(actionName, fn, scope, undefined);\n}\nfunction isAction(thing) {\n    return typeof thing === \"function\" && thing.isMobxAction === true;\n}\nfunction defineBoundAction(target, propertyName, fn) {\n    var res = function () {\n        return executeAction(propertyName, fn, target, arguments);\n    };\n    res.isMobxAction = true;\n    addHiddenProp(target, propertyName, res);\n}\nfunction autorun(arg1, arg2, arg3) {\n    var name, view, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        view = arg2;\n        scope = arg3;\n    }\n    else {\n        name = arg1.name || (\"Autorun@\" + getNextId());\n        view = arg1;\n        scope = arg2;\n    }\n    invariant(typeof view === \"function\", getMessage(\"m004\"));\n    invariant(isAction(view) === false, getMessage(\"m005\"));\n    if (scope)\n        view = view.bind(scope);\n    var reaction = new Reaction(name, function () {\n        this.track(reactionRunner);\n    });\n    function reactionRunner() {\n        view(reaction);\n    }\n    reaction.schedule();\n    return reaction.getDisposer();\n}\nfunction when(arg1, arg2, arg3, arg4) {\n    var name, predicate, effect, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        predicate = arg2;\n        effect = arg3;\n        scope = arg4;\n    }\n    else {\n        name = (\"When@\" + getNextId());\n        predicate = arg1;\n        effect = arg2;\n        scope = arg3;\n    }\n    var disposer = autorun(name, function (r) {\n        if (predicate.call(scope)) {\n            r.dispose();\n            var prevUntracked = untrackedStart();\n            effect.call(scope);\n            untrackedEnd(prevUntracked);\n        }\n    });\n    return disposer;\n}\nfunction autorunAsync(arg1, arg2, arg3, arg4) {\n    var name, func, delay, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        func = arg2;\n        delay = arg3;\n        scope = arg4;\n    }\n    else {\n        name = arg1.name || (\"AutorunAsync@\" + getNextId());\n        func = arg1;\n        delay = arg2;\n        scope = arg3;\n    }\n    invariant(isAction(func) === false, getMessage(\"m006\"));\n    if (delay === void 0)\n        delay = 1;\n    if (scope)\n        func = func.bind(scope);\n    var isScheduled = false;\n    var r = new Reaction(name, function () {\n        if (!isScheduled) {\n            isScheduled = true;\n            setTimeout(function () {\n                isScheduled = false;\n                if (!r.isDisposed)\n                    r.track(reactionRunner);\n            }, delay);\n        }\n    });\n    function reactionRunner() { func(r); }\n    r.schedule();\n    return r.getDisposer();\n}\nfunction reaction(expression, effect, arg3) {\n    if (arguments.length > 3) {\n        fail(getMessage(\"m007\"));\n    }\n    if (isModifierDescriptor(expression)) {\n        fail(getMessage(\"m008\"));\n    }\n    var opts;\n    if (typeof arg3 === \"object\") {\n        opts = arg3;\n    }\n    else {\n        opts = {};\n    }\n    opts.name = opts.name || expression.name || effect.name || (\"Reaction@\" + getNextId());\n    opts.fireImmediately = arg3 === true || opts.fireImmediately === true;\n    opts.delay = opts.delay || 0;\n    opts.compareStructural = opts.compareStructural || opts.struct || false;\n    effect = action(opts.name, opts.context ? effect.bind(opts.context) : effect);\n    if (opts.context) {\n        expression = expression.bind(opts.context);\n    }\n    var firstTime = true;\n    var isScheduled = false;\n    var nextValue;\n    var r = new Reaction(opts.name, function () {\n        if (firstTime || opts.delay < 1) {\n            reactionRunner();\n        }\n        else if (!isScheduled) {\n            isScheduled = true;\n            setTimeout(function () {\n                isScheduled = false;\n                reactionRunner();\n            }, opts.delay);\n        }\n    });\n    function reactionRunner() {\n        if (r.isDisposed)\n            return;\n        var changed = false;\n        r.track(function () {\n            var v = expression(r);\n            changed = valueDidChange(opts.compareStructural, nextValue, v);\n            nextValue = v;\n        });\n        if (firstTime && opts.fireImmediately)\n            effect(nextValue, r);\n        if (!firstTime && changed === true)\n            effect(nextValue, r);\n        if (firstTime)\n            firstTime = false;\n    }\n    r.schedule();\n    return r.getDisposer();\n}\nfunction createComputedDecorator(compareStructural) {\n    return createClassPropertyDecorator(function (target, name, _, __, originalDescriptor) {\n        invariant(typeof originalDescriptor !== \"undefined\", getMessage(\"m009\"));\n        invariant(typeof originalDescriptor.get === \"function\", getMessage(\"m010\"));\n        var adm = asObservableObject(target, \"\");\n        defineComputedProperty(adm, name, originalDescriptor.get, originalDescriptor.set, compareStructural, false);\n    }, function (name) {\n        var observable = this.$mobx.values[name];\n        if (observable === undefined)\n            return undefined;\n        return observable.get();\n    }, function (name, value) {\n        this.$mobx.values[name].set(value);\n    }, false, false);\n}\nvar computedDecorator = createComputedDecorator(false);\nvar computedStructDecorator = createComputedDecorator(true);\nvar computed = (function computed(arg1, arg2, arg3) {\n    if (typeof arg2 === \"string\") {\n        return computedDecorator.apply(null, arguments);\n    }\n    invariant(typeof arg1 === \"function\", getMessage(\"m011\"));\n    invariant(arguments.length < 3, getMessage(\"m012\"));\n    var opts = typeof arg2 === \"object\" ? arg2 : {};\n    opts.setter = typeof arg2 === \"function\" ? arg2 : opts.setter;\n    return new ComputedValue(arg1, opts.context, opts.compareStructural || opts.struct || false, opts.name || arg1.name || \"\", opts.setter);\n});\ncomputed.struct = computedStructDecorator;\nfunction createTransformer(transformer, onCleanup) {\n    invariant(typeof transformer === \"function\" && transformer.length < 2, \"createTransformer expects a function that accepts one argument\");\n    var objectCache = {};\n    var resetId = globalState.resetId;\n    var Transformer = (function (_super) {\n        __extends(Transformer, _super);\n        function Transformer(sourceIdentifier, sourceObject) {\n            var _this = _super.call(this, function () { return transformer(sourceObject); }, undefined, false, \"Transformer-\" + transformer.name + \"-\" + sourceIdentifier, undefined) || this;\n            _this.sourceIdentifier = sourceIdentifier;\n            _this.sourceObject = sourceObject;\n            return _this;\n        }\n        Transformer.prototype.onBecomeUnobserved = function () {\n            var lastValue = this.value;\n            _super.prototype.onBecomeUnobserved.call(this);\n            delete objectCache[this.sourceIdentifier];\n            if (onCleanup)\n                onCleanup(lastValue, this.sourceObject);\n        };\n        return Transformer;\n    }(ComputedValue));\n    return function (object) {\n        if (resetId !== globalState.resetId) {\n            objectCache = {};\n            resetId = globalState.resetId;\n        }\n        var identifier = getMemoizationId(object);\n        var reactiveTransformer = objectCache[identifier];\n        if (reactiveTransformer)\n            return reactiveTransformer.get();\n        reactiveTransformer = objectCache[identifier] = new Transformer(identifier, object);\n        return reactiveTransformer.get();\n    };\n}\nfunction getMemoizationId(object) {\n    if (object === null || typeof object !== \"object\")\n        throw new Error(\"[mobx] transform expected some kind of object, got: \" + object);\n    var tid = object.$transformId;\n    if (tid === undefined) {\n        tid = getNextId();\n        addHiddenProp(object, \"$transformId\", tid);\n    }\n    return tid;\n}\nfunction expr(expr, scope) {\n    if (!isComputingDerivation())\n        console.warn(getMessage(\"m013\"));\n    return computed(expr, { context: scope }).get();\n}\nfunction extendObservable(target) {\n    var properties = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        properties[_i - 1] = arguments[_i];\n    }\n    return extendObservableHelper(target, deepEnhancer, properties);\n}\nfunction extendShallowObservable(target) {\n    var properties = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        properties[_i - 1] = arguments[_i];\n    }\n    return extendObservableHelper(target, referenceEnhancer, properties);\n}\nfunction extendObservableHelper(target, defaultEnhancer, properties) {\n    invariant(arguments.length >= 2, getMessage(\"m014\"));\n    invariant(typeof target === \"object\", getMessage(\"m015\"));\n    invariant(!(isObservableMap(target)), getMessage(\"m016\"));\n    properties.forEach(function (propSet) {\n        invariant(typeof propSet === \"object\", getMessage(\"m017\"));\n        invariant(!isObservable(propSet), getMessage(\"m018\"));\n    });\n    var adm = asObservableObject(target);\n    var definedProps = {};\n    for (var i = properties.length - 1; i >= 0; i--) {\n        var propSet = properties[i];\n        for (var key in propSet)\n            if (definedProps[key] !== true && hasOwnProperty(propSet, key)) {\n                definedProps[key] = true;\n                if (target === propSet && !isPropertyConfigurable(target, key))\n                    continue;\n                var descriptor = Object.getOwnPropertyDescriptor(propSet, key);\n                defineObservablePropertyFromDescriptor(adm, key, descriptor, defaultEnhancer);\n            }\n    }\n    return target;\n}\nfunction getDependencyTree(thing, property) {\n    return nodeToDependencyTree(getAtom(thing, property));\n}\nfunction nodeToDependencyTree(node) {\n    var result = {\n        name: node.name\n    };\n    if (node.observing && node.observing.length > 0)\n        result.dependencies = unique(node.observing).map(nodeToDependencyTree);\n    return result;\n}\nfunction getObserverTree(thing, property) {\n    return nodeToObserverTree(getAtom(thing, property));\n}\nfunction nodeToObserverTree(node) {\n    var result = {\n        name: node.name\n    };\n    if (hasObservers(node))\n        result.observers = getObservers(node).map(nodeToObserverTree);\n    return result;\n}\nfunction intercept(thing, propOrHandler, handler) {\n    if (typeof handler === \"function\")\n        return interceptProperty(thing, propOrHandler, handler);\n    else\n        return interceptInterceptable(thing, propOrHandler);\n}\nfunction interceptInterceptable(thing, handler) {\n    return getAdministration(thing).intercept(handler);\n}\nfunction interceptProperty(thing, property, handler) {\n    return getAdministration(thing, property).intercept(handler);\n}\nfunction isComputed(value, property) {\n    if (value === null || value === undefined)\n        return false;\n    if (property !== undefined) {\n        if (isObservableObject(value) === false)\n            return false;\n        var atom = getAtom(value, property);\n        return isComputedValue(atom);\n    }\n    return isComputedValue(value);\n}\nfunction isObservable(value, property) {\n    if (value === null || value === undefined)\n        return false;\n    if (property !== undefined) {\n        if (isObservableArray(value) || isObservableMap(value))\n            throw new Error(getMessage(\"m019\"));\n        else if (isObservableObject(value)) {\n            var o = value.$mobx;\n            return o.values && !!o.values[property];\n        }\n        return false;\n    }\n    return isObservableObject(value) || !!value.$mobx || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\nvar deepDecorator = createDecoratorForEnhancer(deepEnhancer);\nvar shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);\nvar refDecorator = createDecoratorForEnhancer(referenceEnhancer);\nvar deepStructDecorator = createDecoratorForEnhancer(deepStructEnhancer);\nvar refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);\nfunction createObservable(v) {\n    if (v === void 0) { v = undefined; }\n    if (typeof arguments[1] === \"string\")\n        return deepDecorator.apply(null, arguments);\n    invariant(arguments.length <= 1, getMessage(\"m021\"));\n    invariant(!isModifierDescriptor(v), getMessage(\"m020\"));\n    if (isObservable(v))\n        return v;\n    var res = deepEnhancer(v, undefined, undefined);\n    if (res !== v)\n        return res;\n    return observable.box(v);\n}\nvar IObservableFactories = (function () {\n    function IObservableFactories() {\n    }\n    IObservableFactories.prototype.box = function (value, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"box\");\n        return new ObservableValue(value, deepEnhancer, name);\n    };\n    IObservableFactories.prototype.shallowBox = function (value, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowBox\");\n        return new ObservableValue(value, referenceEnhancer, name);\n    };\n    IObservableFactories.prototype.array = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"array\");\n        return new ObservableArray(initialValues, deepEnhancer, name);\n    };\n    IObservableFactories.prototype.shallowArray = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowArray\");\n        return new ObservableArray(initialValues, referenceEnhancer, name);\n    };\n    IObservableFactories.prototype.map = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"map\");\n        return new ObservableMap(initialValues, deepEnhancer, name);\n    };\n    IObservableFactories.prototype.shallowMap = function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowMap\");\n        return new ObservableMap(initialValues, referenceEnhancer, name);\n    };\n    IObservableFactories.prototype.object = function (props, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"object\");\n        var res = {};\n        asObservableObject(res, name);\n        extendObservable(res, props);\n        return res;\n    };\n    IObservableFactories.prototype.shallowObject = function (props, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowObject\");\n        var res = {};\n        asObservableObject(res, name);\n        extendShallowObservable(res, props);\n        return res;\n    };\n    IObservableFactories.prototype.ref = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(referenceEnhancer, arguments[0]);\n        }\n        else {\n            return refDecorator.apply(null, arguments);\n        }\n    };\n    IObservableFactories.prototype.shallow = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(shallowEnhancer, arguments[0]);\n        }\n        else {\n            return shallowDecorator.apply(null, arguments);\n        }\n    };\n    IObservableFactories.prototype.deep = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(deepEnhancer, arguments[0]);\n        }\n        else {\n            return deepDecorator.apply(null, arguments);\n        }\n    };\n    IObservableFactories.prototype.struct = function () {\n        if (arguments.length < 2) {\n            return createModifierDescriptor(deepStructEnhancer, arguments[0]);\n        }\n        else {\n            return deepStructDecorator.apply(null, arguments);\n        }\n    };\n    return IObservableFactories;\n}());\nvar observable = createObservable;\nObject.keys(IObservableFactories.prototype).forEach(function (key) { return observable[key] = IObservableFactories.prototype[key]; });\nobservable.deep.struct = observable.struct;\nobservable.ref.struct = function () {\n    if (arguments.length < 2) {\n        return createModifierDescriptor(refStructEnhancer, arguments[0]);\n    }\n    else {\n        return refStructDecorator.apply(null, arguments);\n    }\n};\nfunction incorrectlyUsedAsDecorator(methodName) {\n    fail(\"Expected one or two arguments to observable.\" + methodName + \". Did you accidentally try to use observable.\" + methodName + \" as decorator?\");\n}\nfunction createDecoratorForEnhancer(enhancer) {\n    invariant(!!enhancer, \":(\");\n    return createClassPropertyDecorator(function (target, name, baseValue, _, baseDescriptor) {\n        assertPropertyConfigurable(target, name);\n        invariant(!baseDescriptor || !baseDescriptor.get, getMessage(\"m022\"));\n        var adm = asObservableObject(target, undefined);\n        defineObservableProperty(adm, name, baseValue, enhancer);\n    }, function (name) {\n        var observable = this.$mobx.values[name];\n        if (observable === undefined)\n            return undefined;\n        return observable.get();\n    }, function (name, value) {\n        setPropertyValue(this, name, value);\n    }, true, false);\n}\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n    if (typeof cbOrFire === \"function\")\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);\n    else\n        return observeObservable(thing, propOrCb, cbOrFire);\n}\nfunction observeObservable(thing, listener, fireImmediately) {\n    return getAdministration(thing).observe(listener, fireImmediately);\n}\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n    return getAdministration(thing, property).observe(listener, fireImmediately);\n}\nfunction toJS(source, detectCycles, __alreadySeen) {\n    if (detectCycles === void 0) { detectCycles = true; }\n    if (__alreadySeen === void 0) { __alreadySeen = []; }\n    function cache(value) {\n        if (detectCycles)\n            __alreadySeen.push([source, value]);\n        return value;\n    }\n    if (isObservable(source)) {\n        if (detectCycles && __alreadySeen === null)\n            __alreadySeen = [];\n        if (detectCycles && source !== null && typeof source === \"object\") {\n            for (var i = 0, l = __alreadySeen.length; i < l; i++)\n                if (__alreadySeen[i][0] === source)\n                    return __alreadySeen[i][1];\n        }\n        if (isObservableArray(source)) {\n            var res = cache([]);\n            var toAdd = source.map(function (value) { return toJS(value, detectCycles, __alreadySeen); });\n            res.length = toAdd.length;\n            for (var i = 0, l = toAdd.length; i < l; i++)\n                res[i] = toAdd[i];\n            return res;\n        }\n        if (isObservableObject(source)) {\n            var res = cache({});\n            for (var key in source)\n                res[key] = toJS(source[key], detectCycles, __alreadySeen);\n            return res;\n        }\n        if (isObservableMap(source)) {\n            var res_1 = cache({});\n            source.forEach(function (value, key) { return res_1[key] = toJS(value, detectCycles, __alreadySeen); });\n            return res_1;\n        }\n        if (isObservableValue(source))\n            return toJS(source.get(), detectCycles, __alreadySeen);\n    }\n    return source;\n}\nfunction transaction(action, thisArg) {\n    if (thisArg === void 0) { thisArg = undefined; }\n    deprecated(getMessage(\"m023\"));\n    return runInTransaction.apply(undefined, arguments);\n}\nfunction runInTransaction(action, thisArg) {\n    if (thisArg === void 0) { thisArg = undefined; }\n    return executeAction(\"\", action);\n}\nfunction log(msg) {\n    console.log(msg);\n    return msg;\n}\nfunction whyRun(thing, prop) {\n    switch (arguments.length) {\n        case 0:\n            thing = globalState.trackingDerivation;\n            if (!thing)\n                return log(getMessage(\"m024\"));\n            break;\n        case 2:\n            thing = getAtom(thing, prop);\n            break;\n    }\n    thing = getAtom(thing);\n    if (isComputedValue(thing))\n        return log(thing.whyRun());\n    else if (isReaction(thing))\n        return log(thing.whyRun());\n    return fail(getMessage(\"m025\"));\n}\nfunction createAction(actionName, fn) {\n    invariant(typeof fn === \"function\", getMessage(\"m026\"));\n    invariant(typeof actionName === \"string\" && actionName.length > 0, \"actions should have valid names, got: '\" + actionName + \"'\");\n    var res = function () {\n        return executeAction(actionName, fn, this, arguments);\n    };\n    res.originalFn = fn;\n    res.isMobxAction = true;\n    return res;\n}\nfunction executeAction(actionName, fn, scope, args) {\n    var runInfo = startAction(actionName, fn, scope, args);\n    try {\n        return fn.apply(scope, args);\n    }\n    finally {\n        endAction(runInfo);\n    }\n}\nfunction startAction(actionName, fn, scope, args) {\n    var notifySpy = isSpyEnabled() && !!actionName;\n    var startTime = 0;\n    if (notifySpy) {\n        startTime = Date.now();\n        var l = (args && args.length) || 0;\n        var flattendArgs = new Array(l);\n        if (l > 0)\n            for (var i = 0; i < l; i++)\n                flattendArgs[i] = args[i];\n        spyReportStart({\n            type: \"action\",\n            name: actionName,\n            fn: fn,\n            object: scope,\n            arguments: flattendArgs\n        });\n    }\n    var prevDerivation = untrackedStart();\n    startBatch();\n    var prevAllowStateChanges = allowStateChangesStart(true);\n    return {\n        prevDerivation: prevDerivation,\n        prevAllowStateChanges: prevAllowStateChanges,\n        notifySpy: notifySpy,\n        startTime: startTime\n    };\n}\nfunction endAction(runInfo) {\n    allowStateChangesEnd(runInfo.prevAllowStateChanges);\n    endBatch();\n    untrackedEnd(runInfo.prevDerivation);\n    if (runInfo.notifySpy)\n        spyReportEnd({ time: Date.now() - runInfo.startTime });\n}\nfunction useStrict(strict) {\n    invariant(globalState.trackingDerivation === null, getMessage(\"m028\"));\n    globalState.strictMode = strict;\n    globalState.allowStateChanges = !strict;\n}\nfunction isStrictModeEnabled() {\n    return globalState.strictMode;\n}\nfunction allowStateChanges(allowStateChanges, func) {\n    var prev = allowStateChangesStart(allowStateChanges);\n    var res;\n    try {\n        res = func();\n    }\n    finally {\n        allowStateChangesEnd(prev);\n    }\n    return res;\n}\nfunction allowStateChangesStart(allowStateChanges) {\n    var prev = globalState.allowStateChanges;\n    globalState.allowStateChanges = allowStateChanges;\n    return prev;\n}\nfunction allowStateChangesEnd(prev) {\n    globalState.allowStateChanges = prev;\n}\nvar BaseAtom = (function () {\n    function BaseAtom(name) {\n        if (name === void 0) { name = \"Atom@\" + getNextId(); }\n        this.name = name;\n        this.isPendingUnobservation = true;\n        this.observers = [];\n        this.observersIndexes = {};\n        this.diffValue = 0;\n        this.lastAccessedBy = 0;\n        this.lowestObserverState = IDerivationState.NOT_TRACKING;\n    }\n    BaseAtom.prototype.onBecomeUnobserved = function () {\n    };\n    BaseAtom.prototype.reportObserved = function () {\n        reportObserved(this);\n    };\n    BaseAtom.prototype.reportChanged = function () {\n        startBatch();\n        propagateChanged(this);\n        endBatch();\n    };\n    BaseAtom.prototype.toString = function () {\n        return this.name;\n    };\n    return BaseAtom;\n}());\nvar Atom = (function (_super) {\n    __extends(Atom, _super);\n    function Atom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n        if (name === void 0) { name = \"Atom@\" + getNextId(); }\n        if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop; }\n        if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop; }\n        var _this = _super.call(this, name) || this;\n        _this.name = name;\n        _this.onBecomeObservedHandler = onBecomeObservedHandler;\n        _this.onBecomeUnobservedHandler = onBecomeUnobservedHandler;\n        _this.isPendingUnobservation = false;\n        _this.isBeingTracked = false;\n        return _this;\n    }\n    Atom.prototype.reportObserved = function () {\n        startBatch();\n        _super.prototype.reportObserved.call(this);\n        if (!this.isBeingTracked) {\n            this.isBeingTracked = true;\n            this.onBecomeObservedHandler();\n        }\n        endBatch();\n        return !!globalState.trackingDerivation;\n    };\n    Atom.prototype.onBecomeUnobserved = function () {\n        this.isBeingTracked = false;\n        this.onBecomeUnobservedHandler();\n    };\n    return Atom;\n}(BaseAtom));\nvar isAtom = createInstanceofPredicate(\"Atom\", BaseAtom);\nvar ComputedValue = (function () {\n    function ComputedValue(derivation, scope, compareStructural, name, setter) {\n        this.derivation = derivation;\n        this.scope = scope;\n        this.compareStructural = compareStructural;\n        this.dependenciesState = IDerivationState.NOT_TRACKING;\n        this.observing = [];\n        this.newObserving = null;\n        this.isPendingUnobservation = false;\n        this.observers = [];\n        this.observersIndexes = {};\n        this.diffValue = 0;\n        this.runId = 0;\n        this.lastAccessedBy = 0;\n        this.lowestObserverState = IDerivationState.UP_TO_DATE;\n        this.unboundDepsCount = 0;\n        this.__mapid = \"#\" + getNextId();\n        this.value = undefined;\n        this.isComputing = false;\n        this.isRunningSetter = false;\n        this.name = name || \"ComputedValue@\" + getNextId();\n        if (setter)\n            this.setter = createAction(name + \"-setter\", setter);\n    }\n    ComputedValue.prototype.onBecomeStale = function () {\n        propagateMaybeChanged(this);\n    };\n    ComputedValue.prototype.onBecomeUnobserved = function () {\n        invariant(this.dependenciesState !== IDerivationState.NOT_TRACKING, getMessage(\"m029\"));\n        clearObserving(this);\n        this.value = undefined;\n    };\n    ComputedValue.prototype.get = function () {\n        invariant(!this.isComputing, \"Cycle detected in computation \" + this.name, this.derivation);\n        if (globalState.inBatch === 0) {\n            startBatch();\n            if (shouldCompute(this))\n                this.value = this.computeValue(false);\n            endBatch();\n        }\n        else {\n            reportObserved(this);\n            if (shouldCompute(this))\n                if (this.trackAndCompute())\n                    propagateChangeConfirmed(this);\n        }\n        var result = this.value;\n        if (isCaughtException(result))\n            throw result.cause;\n        return result;\n    };\n    ComputedValue.prototype.peek = function () {\n        var res = this.computeValue(false);\n        if (isCaughtException(res))\n            throw res.cause;\n        return res;\n    };\n    ComputedValue.prototype.set = function (value) {\n        if (this.setter) {\n            invariant(!this.isRunningSetter, \"The setter of computed value '\" + this.name + \"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?\");\n            this.isRunningSetter = true;\n            try {\n                this.setter.call(this.scope, value);\n            }\n            finally {\n                this.isRunningSetter = false;\n            }\n        }\n        else\n            invariant(false, \"[ComputedValue '\" + this.name + \"'] It is not possible to assign a new value to a computed value.\");\n    };\n    ComputedValue.prototype.trackAndCompute = function () {\n        if (isSpyEnabled()) {\n            spyReport({\n                object: this.scope,\n                type: \"compute\",\n                fn: this.derivation\n            });\n        }\n        var oldValue = this.value;\n        var newValue = this.value = this.computeValue(true);\n        return isCaughtException(newValue) || valueDidChange(this.compareStructural, newValue, oldValue);\n    };\n    ComputedValue.prototype.computeValue = function (track) {\n        this.isComputing = true;\n        globalState.computationDepth++;\n        var res;\n        if (track) {\n            res = trackDerivedFunction(this, this.derivation, this.scope);\n        }\n        else {\n            try {\n                res = this.derivation.call(this.scope);\n            }\n            catch (e) {\n                res = new CaughtException(e);\n            }\n        }\n        globalState.computationDepth--;\n        this.isComputing = false;\n        return res;\n    };\n    ;\n    ComputedValue.prototype.observe = function (listener, fireImmediately) {\n        var _this = this;\n        var firstTime = true;\n        var prevValue = undefined;\n        return autorun(function () {\n            var newValue = _this.get();\n            if (!firstTime || fireImmediately) {\n                var prevU = untrackedStart();\n                listener({\n                    type: \"update\",\n                    object: _this,\n                    newValue: newValue,\n                    oldValue: prevValue\n                });\n                untrackedEnd(prevU);\n            }\n            firstTime = false;\n            prevValue = newValue;\n        });\n    };\n    ComputedValue.prototype.toJSON = function () {\n        return this.get();\n    };\n    ComputedValue.prototype.toString = function () {\n        return this.name + \"[\" + this.derivation.toString() + \"]\";\n    };\n    ComputedValue.prototype.valueOf = function () {\n        return toPrimitive(this.get());\n    };\n    ;\n    ComputedValue.prototype.whyRun = function () {\n        var isTracking = Boolean(globalState.trackingDerivation);\n        var observing = unique(this.isComputing ? this.newObserving : this.observing).map(function (dep) { return dep.name; });\n        var observers = unique(getObservers(this).map(function (dep) { return dep.name; }));\n        return (\"\\nWhyRun? computation '\" + this.name + \"':\\n * Running because: \" + (isTracking ? \"[active] the value of this computation is needed by a reaction\" : this.isComputing ? \"[get] The value of this computed was requested outside a reaction\" : \"[idle] not running at the moment\") + \"\\n\" +\n            (this.dependenciesState === IDerivationState.NOT_TRACKING ? getMessage(\"m032\") :\n                \" * This computation will re-run if any of the following observables changes:\\n    \" + joinStrings(observing) + \"\\n    \" + ((this.isComputing && isTracking) ? \" (... or any observable accessed during the remainder of the current run)\" : \"\") + \"\\n\\t\" + getMessage(\"m038\") + \"\\n\\n  * If the outcome of this computation changes, the following observers will be re-run:\\n    \" + joinStrings(observers) + \"\\n\"));\n    };\n    return ComputedValue;\n}());\nComputedValue.prototype[primitiveSymbol()] = ComputedValue.prototype.valueOf;\nvar isComputedValue = createInstanceofPredicate(\"ComputedValue\", ComputedValue);\nvar IDerivationState;\n(function (IDerivationState) {\n    IDerivationState[IDerivationState[\"NOT_TRACKING\"] = -1] = \"NOT_TRACKING\";\n    IDerivationState[IDerivationState[\"UP_TO_DATE\"] = 0] = \"UP_TO_DATE\";\n    IDerivationState[IDerivationState[\"POSSIBLY_STALE\"] = 1] = \"POSSIBLY_STALE\";\n    IDerivationState[IDerivationState[\"STALE\"] = 2] = \"STALE\";\n})(IDerivationState || (IDerivationState = {}));\nvar CaughtException = (function () {\n    function CaughtException(cause) {\n        this.cause = cause;\n    }\n    return CaughtException;\n}());\nfunction isCaughtException(e) {\n    return e instanceof CaughtException;\n}\nfunction shouldCompute(derivation) {\n    switch (derivation.dependenciesState) {\n        case IDerivationState.UP_TO_DATE: return false;\n        case IDerivationState.NOT_TRACKING:\n        case IDerivationState.STALE: return true;\n        case IDerivationState.POSSIBLY_STALE: {\n            var prevUntracked = untrackedStart();\n            var obs = derivation.observing, l = obs.length;\n            for (var i = 0; i < l; i++) {\n                var obj = obs[i];\n                if (isComputedValue(obj)) {\n                    try {\n                        obj.get();\n                    }\n                    catch (e) {\n                        untrackedEnd(prevUntracked);\n                        return true;\n                    }\n                    if (derivation.dependenciesState === IDerivationState.STALE) {\n                        untrackedEnd(prevUntracked);\n                        return true;\n                    }\n                }\n            }\n            changeDependenciesStateTo0(derivation);\n            untrackedEnd(prevUntracked);\n            return false;\n        }\n    }\n}\nfunction isComputingDerivation() {\n    return globalState.trackingDerivation !== null;\n}\nfunction checkIfStateModificationsAreAllowed(atom) {\n    var hasObservers = atom.observers.length > 0;\n    if (globalState.computationDepth > 0 && hasObservers)\n        fail(getMessage(\"m031\") + atom.name);\n    if (!globalState.allowStateChanges && hasObservers)\n        fail(getMessage(globalState.strictMode ? \"m030a\" : \"m030b\") + atom.name);\n}\nfunction trackDerivedFunction(derivation, f, context) {\n    changeDependenciesStateTo0(derivation);\n    derivation.newObserving = new Array(derivation.observing.length + 100);\n    derivation.unboundDepsCount = 0;\n    derivation.runId = ++globalState.runId;\n    var prevTracking = globalState.trackingDerivation;\n    globalState.trackingDerivation = derivation;\n    var result;\n    try {\n        result = f.call(context);\n    }\n    catch (e) {\n        result = new CaughtException(e);\n    }\n    globalState.trackingDerivation = prevTracking;\n    bindDependencies(derivation);\n    return result;\n}\nfunction bindDependencies(derivation) {\n    var prevObserving = derivation.observing;\n    var observing = derivation.observing = derivation.newObserving;\n    derivation.newObserving = null;\n    var i0 = 0, l = derivation.unboundDepsCount;\n    for (var i = 0; i < l; i++) {\n        var dep = observing[i];\n        if (dep.diffValue === 0) {\n            dep.diffValue = 1;\n            if (i0 !== i)\n                observing[i0] = dep;\n            i0++;\n        }\n    }\n    observing.length = i0;\n    l = prevObserving.length;\n    while (l--) {\n        var dep = prevObserving[l];\n        if (dep.diffValue === 0) {\n            removeObserver(dep, derivation);\n        }\n        dep.diffValue = 0;\n    }\n    while (i0--) {\n        var dep = observing[i0];\n        if (dep.diffValue === 1) {\n            dep.diffValue = 0;\n            addObserver(dep, derivation);\n        }\n    }\n}\nfunction clearObserving(derivation) {\n    var obs = derivation.observing;\n    var i = obs.length;\n    while (i--)\n        removeObserver(obs[i], derivation);\n    derivation.dependenciesState = IDerivationState.NOT_TRACKING;\n    obs.length = 0;\n}\nfunction untracked(action) {\n    var prev = untrackedStart();\n    var res = action();\n    untrackedEnd(prev);\n    return res;\n}\nfunction untrackedStart() {\n    var prev = globalState.trackingDerivation;\n    globalState.trackingDerivation = null;\n    return prev;\n}\nfunction untrackedEnd(prev) {\n    globalState.trackingDerivation = prev;\n}\nfunction changeDependenciesStateTo0(derivation) {\n    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)\n        return;\n    derivation.dependenciesState = IDerivationState.UP_TO_DATE;\n    var obs = derivation.observing;\n    var i = obs.length;\n    while (i--)\n        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;\n}\nvar persistentKeys = [\"mobxGuid\", \"resetId\", \"spyListeners\", \"strictMode\", \"runId\"];\nvar MobXGlobals = (function () {\n    function MobXGlobals() {\n        this.version = 5;\n        this.trackingDerivation = null;\n        this.computationDepth = 0;\n        this.runId = 0;\n        this.mobxGuid = 0;\n        this.inBatch = 0;\n        this.pendingUnobservations = [];\n        this.pendingReactions = [];\n        this.isRunningReactions = false;\n        this.allowStateChanges = true;\n        this.strictMode = false;\n        this.resetId = 0;\n        this.spyListeners = [];\n        this.globalReactionErrorHandlers = [];\n    }\n    return MobXGlobals;\n}());\nvar globalState = new MobXGlobals();\nfunction shareGlobalState() {\n    var global = getGlobal();\n    var ownState = globalState;\n    if (global.__mobservableTrackingStack || global.__mobservableViewStack)\n        throw new Error(\"[mobx] An incompatible version of mobservable is already loaded.\");\n    if (global.__mobxGlobal && global.__mobxGlobal.version !== ownState.version)\n        throw new Error(\"[mobx] An incompatible version of mobx is already loaded.\");\n    if (global.__mobxGlobal)\n        globalState = global.__mobxGlobal;\n    else\n        global.__mobxGlobal = ownState;\n}\nfunction getGlobalState() {\n    return globalState;\n}\nfunction registerGlobals() {\n}\nfunction resetGlobalState() {\n    globalState.resetId++;\n    var defaultGlobals = new MobXGlobals();\n    for (var key in defaultGlobals)\n        if (persistentKeys.indexOf(key) === -1)\n            globalState[key] = defaultGlobals[key];\n    globalState.allowStateChanges = !globalState.strictMode;\n}\nfunction hasObservers(observable) {\n    return observable.observers && observable.observers.length > 0;\n}\nfunction getObservers(observable) {\n    return observable.observers;\n}\nfunction invariantObservers(observable) {\n    var list = observable.observers;\n    var map = observable.observersIndexes;\n    var l = list.length;\n    for (var i = 0; i < l; i++) {\n        var id = list[i].__mapid;\n        if (i) {\n            invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\");\n        }\n        else {\n            invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldnt be held in map.\");\n        }\n    }\n    invariant(list.length === 0 || Object.keys(map).length === list.length - 1, \"INTERNAL ERROR there is no junk in map\");\n}\nfunction addObserver(observable, node) {\n    var l = observable.observers.length;\n    if (l) {\n        observable.observersIndexes[node.__mapid] = l;\n    }\n    observable.observers[l] = node;\n    if (observable.lowestObserverState > node.dependenciesState)\n        observable.lowestObserverState = node.dependenciesState;\n}\nfunction removeObserver(observable, node) {\n    if (observable.observers.length === 1) {\n        observable.observers.length = 0;\n        queueForUnobservation(observable);\n    }\n    else {\n        var list = observable.observers;\n        var map_1 = observable.observersIndexes;\n        var filler = list.pop();\n        if (filler !== node) {\n            var index = map_1[node.__mapid] || 0;\n            if (index) {\n                map_1[filler.__mapid] = index;\n            }\n            else {\n                delete map_1[filler.__mapid];\n            }\n            list[index] = filler;\n        }\n        delete map_1[node.__mapid];\n    }\n}\nfunction queueForUnobservation(observable) {\n    if (!observable.isPendingUnobservation) {\n        observable.isPendingUnobservation = true;\n        globalState.pendingUnobservations.push(observable);\n    }\n}\nfunction startBatch() {\n    globalState.inBatch++;\n}\nfunction endBatch() {\n    if (--globalState.inBatch === 0) {\n        runReactions();\n        var list = globalState.pendingUnobservations;\n        for (var i = 0; i < list.length; i++) {\n            var observable_1 = list[i];\n            observable_1.isPendingUnobservation = false;\n            if (observable_1.observers.length === 0) {\n                observable_1.onBecomeUnobserved();\n            }\n        }\n        globalState.pendingUnobservations = [];\n    }\n}\nfunction reportObserved(observable) {\n    var derivation = globalState.trackingDerivation;\n    if (derivation !== null) {\n        if (derivation.runId !== observable.lastAccessedBy) {\n            observable.lastAccessedBy = derivation.runId;\n            derivation.newObserving[derivation.unboundDepsCount++] = observable;\n        }\n    }\n    else if (observable.observers.length === 0) {\n        queueForUnobservation(observable);\n    }\n}\nfunction invariantLOS(observable, msg) {\n    var min = getObservers(observable).reduce(function (a, b) { return Math.min(a, b.dependenciesState); }, 2);\n    if (min >= observable.lowestObserverState)\n        return;\n    throw new Error(\"lowestObserverState is wrong for \" + msg + \" because \" + min + \" < \" + observable.lowestObserverState);\n}\nfunction propagateChanged(observable) {\n    if (observable.lowestObserverState === IDerivationState.STALE)\n        return;\n    observable.lowestObserverState = IDerivationState.STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE)\n            d.onBecomeStale();\n        d.dependenciesState = IDerivationState.STALE;\n    }\n}\nfunction propagateChangeConfirmed(observable) {\n    if (observable.lowestObserverState === IDerivationState.STALE)\n        return;\n    observable.lowestObserverState = IDerivationState.STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)\n            d.dependenciesState = IDerivationState.STALE;\n        else if (d.dependenciesState === IDerivationState.UP_TO_DATE)\n            observable.lowestObserverState = IDerivationState.UP_TO_DATE;\n    }\n}\nfunction propagateMaybeChanged(observable) {\n    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)\n        return;\n    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {\n            d.dependenciesState = IDerivationState.POSSIBLY_STALE;\n            d.onBecomeStale();\n        }\n    }\n}\nvar Reaction = (function () {\n    function Reaction(name, onInvalidate) {\n        if (name === void 0) { name = \"Reaction@\" + getNextId(); }\n        this.name = name;\n        this.onInvalidate = onInvalidate;\n        this.observing = [];\n        this.newObserving = [];\n        this.dependenciesState = IDerivationState.NOT_TRACKING;\n        this.diffValue = 0;\n        this.runId = 0;\n        this.unboundDepsCount = 0;\n        this.__mapid = \"#\" + getNextId();\n        this.isDisposed = false;\n        this._isScheduled = false;\n        this._isTrackPending = false;\n        this._isRunning = false;\n    }\n    Reaction.prototype.onBecomeStale = function () {\n        this.schedule();\n    };\n    Reaction.prototype.schedule = function () {\n        if (!this._isScheduled) {\n            this._isScheduled = true;\n            globalState.pendingReactions.push(this);\n            runReactions();\n        }\n    };\n    Reaction.prototype.isScheduled = function () {\n        return this._isScheduled;\n    };\n    Reaction.prototype.runReaction = function () {\n        if (!this.isDisposed) {\n            startBatch();\n            this._isScheduled = false;\n            if (shouldCompute(this)) {\n                this._isTrackPending = true;\n                this.onInvalidate();\n                if (this._isTrackPending && isSpyEnabled()) {\n                    spyReport({\n                        object: this,\n                        type: \"scheduled-reaction\"\n                    });\n                }\n            }\n            endBatch();\n        }\n    };\n    Reaction.prototype.track = function (fn) {\n        startBatch();\n        var notify = isSpyEnabled();\n        var startTime;\n        if (notify) {\n            startTime = Date.now();\n            spyReportStart({\n                object: this,\n                type: \"reaction\",\n                fn: fn\n            });\n        }\n        this._isRunning = true;\n        var result = trackDerivedFunction(this, fn, undefined);\n        this._isRunning = false;\n        this._isTrackPending = false;\n        if (this.isDisposed) {\n            clearObserving(this);\n        }\n        if (isCaughtException(result))\n            this.reportExceptionInDerivation(result.cause);\n        if (notify) {\n            spyReportEnd({\n                time: Date.now() - startTime\n            });\n        }\n        endBatch();\n    };\n    Reaction.prototype.reportExceptionInDerivation = function (error) {\n        var _this = this;\n        if (this.errorHandler) {\n            this.errorHandler(error, this);\n            return;\n        }\n        var message = \"[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '\" + this;\n        var messageToUser = getMessage(\"m037\");\n        console.error(message || messageToUser, error);\n        if (isSpyEnabled()) {\n            spyReport({\n                type: \"error\",\n                message: message,\n                error: error,\n                object: this\n            });\n        }\n        globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });\n    };\n    Reaction.prototype.dispose = function () {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            if (!this._isRunning) {\n                startBatch();\n                clearObserving(this);\n                endBatch();\n            }\n        }\n    };\n    Reaction.prototype.getDisposer = function () {\n        var r = this.dispose.bind(this);\n        r.$mobx = this;\n        r.onError = registerErrorHandler;\n        return r;\n    };\n    Reaction.prototype.toString = function () {\n        return \"Reaction[\" + this.name + \"]\";\n    };\n    Reaction.prototype.whyRun = function () {\n        var observing = unique(this._isRunning ? this.newObserving : this.observing).map(function (dep) { return dep.name; });\n        return (\"\\nWhyRun? reaction '\" + this.name + \"':\\n * Status: [\" + (this.isDisposed ? \"stopped\" : this._isRunning ? \"running\" : this.isScheduled() ? \"scheduled\" : \"idle\") + \"]\\n * This reaction will re-run if any of the following observables changes:\\n    \" + joinStrings(observing) + \"\\n    \" + ((this._isRunning) ? \" (... or any observable accessed during the remainder of the current run)\" : \"\") + \"\\n\\t\" + getMessage(\"m038\") + \"\\n\");\n    };\n    return Reaction;\n}());\nfunction registerErrorHandler(handler) {\n    invariant(this && this.$mobx && isReaction(this.$mobx), \"Invalid `this`\");\n    invariant(!this.$mobx.errorHandler, \"Only one onErrorHandler can be registered\");\n    this.$mobx.errorHandler = handler;\n}\nfunction onReactionError(handler) {\n    globalState.globalReactionErrorHandlers.push(handler);\n    return function () {\n        var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n        if (idx >= 0)\n            globalState.globalReactionErrorHandlers.splice(idx, 1);\n    };\n}\nvar MAX_REACTION_ITERATIONS = 100;\nvar reactionScheduler = function (f) { return f(); };\nfunction runReactions() {\n    if (globalState.inBatch > 0 || globalState.isRunningReactions)\n        return;\n    reactionScheduler(runReactionsHelper);\n}\nfunction runReactionsHelper() {\n    globalState.isRunningReactions = true;\n    var allReactions = globalState.pendingReactions;\n    var iterations = 0;\n    while (allReactions.length > 0) {\n        if (++iterations === MAX_REACTION_ITERATIONS) {\n            console.error(\"Reaction doesn't converge to a stable state after \" + MAX_REACTION_ITERATIONS + \" iterations.\"\n                + (\" Probably there is a cycle in the reactive function: \" + allReactions[0]));\n            allReactions.splice(0);\n        }\n        var remainingReactions = allReactions.splice(0);\n        for (var i = 0, l = remainingReactions.length; i < l; i++)\n            remainingReactions[i].runReaction();\n    }\n    globalState.isRunningReactions = false;\n}\nvar isReaction = createInstanceofPredicate(\"Reaction\", Reaction);\nfunction setReactionScheduler(fn) {\n    var baseScheduler = reactionScheduler;\n    reactionScheduler = function (f) { return fn(function () { return baseScheduler(f); }); };\n}\nfunction isSpyEnabled() {\n    return !!globalState.spyListeners.length;\n}\nfunction spyReport(event) {\n    if (!globalState.spyListeners.length)\n        return;\n    var listeners = globalState.spyListeners;\n    for (var i = 0, l = listeners.length; i < l; i++)\n        listeners[i](event);\n}\nfunction spyReportStart(event) {\n    var change = objectAssign({}, event, { spyReportStart: true });\n    spyReport(change);\n}\nvar END_EVENT = { spyReportEnd: true };\nfunction spyReportEnd(change) {\n    if (change)\n        spyReport(objectAssign({}, change, END_EVENT));\n    else\n        spyReport(END_EVENT);\n}\nfunction spy(listener) {\n    globalState.spyListeners.push(listener);\n    return once(function () {\n        var idx = globalState.spyListeners.indexOf(listener);\n        if (idx !== -1)\n            globalState.spyListeners.splice(idx, 1);\n    });\n}\nfunction hasInterceptors(interceptable) {\n    return (interceptable.interceptors && interceptable.interceptors.length > 0);\n}\nfunction registerInterceptor(interceptable, handler) {\n    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);\n    interceptors.push(handler);\n    return once(function () {\n        var idx = interceptors.indexOf(handler);\n        if (idx !== -1)\n            interceptors.splice(idx, 1);\n    });\n}\nfunction interceptChange(interceptable, change) {\n    var prevU = untrackedStart();\n    try {\n        var interceptors = interceptable.interceptors;\n        if (interceptors)\n            for (var i = 0, l = interceptors.length; i < l; i++) {\n                change = interceptors[i](change);\n                invariant(!change || change.type, \"Intercept handlers should return nothing or a change object\");\n                if (!change)\n                    break;\n            }\n        return change;\n    }\n    finally {\n        untrackedEnd(prevU);\n    }\n}\nfunction hasListeners(listenable) {\n    return listenable.changeListeners && listenable.changeListeners.length > 0;\n}\nfunction registerListener(listenable, handler) {\n    var listeners = listenable.changeListeners || (listenable.changeListeners = []);\n    listeners.push(handler);\n    return once(function () {\n        var idx = listeners.indexOf(handler);\n        if (idx !== -1)\n            listeners.splice(idx, 1);\n    });\n}\nfunction notifyListeners(listenable, change) {\n    var prevU = untrackedStart();\n    var listeners = listenable.changeListeners;\n    if (!listeners)\n        return;\n    listeners = listeners.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](change);\n    }\n    untrackedEnd(prevU);\n}\nfunction asReference(value) {\n    deprecated(\"asReference is deprecated, use observable.ref instead\");\n    return observable.ref(value);\n}\nfunction asStructure(value) {\n    deprecated(\"asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead.\");\n    return observable.struct(value);\n}\nfunction asFlat(value) {\n    deprecated(\"asFlat is deprecated, use observable.shallow instead\");\n    return observable.shallow(value);\n}\nfunction asMap(data) {\n    deprecated(\"asMap is deprecated, use observable.map or observable.shallowMap instead\");\n    return observable.map(data || {});\n}\nfunction isModifierDescriptor(thing) {\n    return typeof thing === \"object\" && thing !== null && thing.isMobxModifierDescriptor === true;\n}\nfunction createModifierDescriptor(enhancer, initialValue) {\n    invariant(!isModifierDescriptor(initialValue), \"Modifiers cannot be nested\");\n    return {\n        isMobxModifierDescriptor: true,\n        initialValue: initialValue,\n        enhancer: enhancer\n    };\n}\nfunction deepEnhancer(v, _, name) {\n    if (isModifierDescriptor(v))\n        fail(\"You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it\");\n    if (isObservable(v))\n        return v;\n    if (Array.isArray(v))\n        return observable.array(v, name);\n    if (isPlainObject(v))\n        return observable.object(v, name);\n    if (isES6Map(v))\n        return observable.map(v, name);\n    return v;\n}\nfunction shallowEnhancer(v, _, name) {\n    if (isModifierDescriptor(v))\n        fail(\"You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it\");\n    if (v === undefined || v === null)\n        return v;\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v))\n        return v;\n    if (Array.isArray(v))\n        return observable.shallowArray(v, name);\n    if (isPlainObject(v))\n        return observable.shallowObject(v, name);\n    if (isES6Map(v))\n        return observable.shallowMap(v, name);\n    return fail(\"The shallow modifier / decorator can only used in combination with arrays, objects and maps\");\n}\nfunction referenceEnhancer(newValue) {\n    return newValue;\n}\nfunction deepStructEnhancer(v, oldValue, name) {\n    if (deepEqual(v, oldValue))\n        return oldValue;\n    if (isObservable(v))\n        return v;\n    if (Array.isArray(v))\n        return new ObservableArray(v, deepStructEnhancer, name);\n    if (isES6Map(v))\n        return new ObservableMap(v, deepStructEnhancer, name);\n    if (isPlainObject(v)) {\n        var res = {};\n        asObservableObject(res, name);\n        extendObservableHelper(res, deepStructEnhancer, [v]);\n        return res;\n    }\n    return v;\n}\nfunction refStructEnhancer(v, oldValue, name) {\n    if (deepEqual(v, oldValue))\n        return oldValue;\n    return v;\n}\nvar MAX_SPLICE_SIZE = 10000;\nvar safariPrototypeSetterInheritanceBug = (function () {\n    var v = false;\n    var p = {};\n    Object.defineProperty(p, \"0\", { set: function () { v = true; } });\n    Object.create(p)[\"0\"] = 1;\n    return v === false;\n})();\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0;\nvar StubArray = (function () {\n    function StubArray() {\n    }\n    return StubArray;\n}());\nStubArray.prototype = [];\nvar ObservableArrayAdministration = (function () {\n    function ObservableArrayAdministration(name, enhancer, array, owned) {\n        this.array = array;\n        this.owned = owned;\n        this.lastKnownLength = 0;\n        this.interceptors = null;\n        this.changeListeners = null;\n        this.atom = new BaseAtom(name || (\"ObservableArray@\" + getNextId()));\n        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + \"[..]\"); };\n    }\n    ObservableArrayAdministration.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately === void 0) { fireImmediately = false; }\n        if (fireImmediately) {\n            listener({\n                object: this.array,\n                type: \"splice\",\n                index: 0,\n                added: this.values.slice(),\n                addedCount: this.values.length,\n                removed: [],\n                removedCount: 0\n            });\n        }\n        return registerListener(this, listener);\n    };\n    ObservableArrayAdministration.prototype.getArrayLength = function () {\n        this.atom.reportObserved();\n        return this.values.length;\n    };\n    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {\n        if (typeof newLength !== \"number\" || newLength < 0)\n            throw new Error(\"[mobx.array] Out of range: \" + newLength);\n        var currentLength = this.values.length;\n        if (newLength === currentLength)\n            return;\n        else if (newLength > currentLength) {\n            var newItems = new Array(newLength - currentLength);\n            for (var i = 0; i < newLength - currentLength; i++)\n                newItems[i] = undefined;\n            this.spliceWithArray(currentLength, 0, newItems);\n        }\n        else\n            this.spliceWithArray(newLength, currentLength - newLength);\n    };\n    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {\n        if (oldLength !== this.lastKnownLength)\n            throw new Error(\"[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?\");\n        this.lastKnownLength += delta;\n        if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE)\n            reserveArrayBuffer(oldLength + delta + 1);\n    };\n    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {\n        var _this = this;\n        checkIfStateModificationsAreAllowed(this.atom);\n        var length = this.values.length;\n        if (index === undefined)\n            index = 0;\n        else if (index > length)\n            index = length;\n        else if (index < 0)\n            index = Math.max(0, length + index);\n        if (arguments.length === 1)\n            deleteCount = length - index;\n        else if (deleteCount === undefined || deleteCount === null)\n            deleteCount = 0;\n        else\n            deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n        if (newItems === undefined)\n            newItems = [];\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                object: this.array,\n                type: \"splice\",\n                index: index,\n                removedCount: deleteCount,\n                added: newItems\n            });\n            if (!change)\n                return EMPTY_ARRAY;\n            deleteCount = change.removedCount;\n            newItems = change.added;\n        }\n        newItems = newItems.map(function (v) { return _this.enhancer(v, undefined); });\n        var lengthDelta = newItems.length - deleteCount;\n        this.updateArrayLength(length, lengthDelta);\n        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);\n        if (deleteCount !== 0 || newItems.length !== 0)\n            this.notifyArraySplice(index, newItems, res);\n        return res;\n    };\n    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {\n        if (newItems.length < MAX_SPLICE_SIZE) {\n            return (_a = this.values).splice.apply(_a, [index, deleteCount].concat(newItems));\n        }\n        else {\n            var res = this.values.slice(index, index + deleteCount);\n            this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount));\n            return res;\n        }\n        var _a;\n    };\n    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {\n        var notifySpy = !this.owned && isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy ? {\n            object: this.array,\n            type: \"update\",\n            index: index, newValue: newValue, oldValue: oldValue\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        this.atom.reportChanged();\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {\n        var notifySpy = !this.owned && isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy ? {\n            object: this.array,\n            type: \"splice\",\n            index: index, removed: removed, added: added,\n            removedCount: removed.length,\n            addedCount: added.length\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        this.atom.reportChanged();\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    return ObservableArrayAdministration;\n}());\nvar ObservableArray = (function (_super) {\n    __extends(ObservableArray, _super);\n    function ObservableArray(initialValues, enhancer, name, owned) {\n        if (name === void 0) { name = \"ObservableArray@\" + getNextId(); }\n        if (owned === void 0) { owned = false; }\n        var _this = _super.call(this) || this;\n        var adm = new ObservableArrayAdministration(name, enhancer, _this, owned);\n        addHiddenFinalProp(_this, \"$mobx\", adm);\n        if (initialValues && initialValues.length) {\n            adm.updateArrayLength(0, initialValues.length);\n            adm.values = initialValues.map(function (v) { return enhancer(v, undefined, name + \"[..]\"); });\n            adm.notifyArraySplice(0, adm.values.slice(), EMPTY_ARRAY);\n        }\n        else {\n            adm.values = [];\n        }\n        if (safariPrototypeSetterInheritanceBug) {\n            Object.defineProperty(adm.array, \"0\", ENTRY_0);\n        }\n        return _this;\n    }\n    ObservableArray.prototype.intercept = function (handler) {\n        return this.$mobx.intercept(handler);\n    };\n    ObservableArray.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately === void 0) { fireImmediately = false; }\n        return this.$mobx.observe(listener, fireImmediately);\n    };\n    ObservableArray.prototype.clear = function () {\n        return this.splice(0);\n    };\n    ObservableArray.prototype.concat = function () {\n        var arrays = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            arrays[_i] = arguments[_i];\n        }\n        this.$mobx.atom.reportObserved();\n        return Array.prototype.concat.apply(this.peek(), arrays.map(function (a) { return isObservableArray(a) ? a.peek() : a; }));\n    };\n    ObservableArray.prototype.replace = function (newItems) {\n        return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);\n    };\n    ObservableArray.prototype.toJS = function () {\n        return this.slice();\n    };\n    ObservableArray.prototype.toJSON = function () {\n        return this.toJS();\n    };\n    ObservableArray.prototype.peek = function () {\n        return this.$mobx.values;\n    };\n    ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {\n        if (fromIndex === void 0) { fromIndex = 0; }\n        this.$mobx.atom.reportObserved();\n        var items = this.$mobx.values, l = items.length;\n        for (var i = fromIndex; i < l; i++)\n            if (predicate.call(thisArg, items[i], i, this))\n                return items[i];\n        return undefined;\n    };\n    ObservableArray.prototype.splice = function (index, deleteCount) {\n        var newItems = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            newItems[_i - 2] = arguments[_i];\n        }\n        switch (arguments.length) {\n            case 0:\n                return [];\n            case 1:\n                return this.$mobx.spliceWithArray(index);\n            case 2:\n                return this.$mobx.spliceWithArray(index, deleteCount);\n        }\n        return this.$mobx.spliceWithArray(index, deleteCount, newItems);\n    };\n    ObservableArray.prototype.spliceWithArray = function (index, deleteCount, newItems) {\n        return this.$mobx.spliceWithArray(index, deleteCount, newItems);\n    };\n    ObservableArray.prototype.push = function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i] = arguments[_i];\n        }\n        var adm = this.$mobx;\n        adm.spliceWithArray(adm.values.length, 0, items);\n        return adm.values.length;\n    };\n    ObservableArray.prototype.pop = function () {\n        return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];\n    };\n    ObservableArray.prototype.shift = function () {\n        return this.splice(0, 1)[0];\n    };\n    ObservableArray.prototype.unshift = function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i] = arguments[_i];\n        }\n        var adm = this.$mobx;\n        adm.spliceWithArray(0, 0, items);\n        return adm.values.length;\n    };\n    ObservableArray.prototype.reverse = function () {\n        this.$mobx.atom.reportObserved();\n        var clone = this.slice();\n        return clone.reverse.apply(clone, arguments);\n    };\n    ObservableArray.prototype.sort = function (compareFn) {\n        this.$mobx.atom.reportObserved();\n        var clone = this.slice();\n        return clone.sort.apply(clone, arguments);\n    };\n    ObservableArray.prototype.remove = function (value) {\n        var idx = this.$mobx.values.indexOf(value);\n        if (idx > -1) {\n            this.splice(idx, 1);\n            return true;\n        }\n        return false;\n    };\n    ObservableArray.prototype.move = function (fromIndex, toIndex) {\n        function checkIndex(index) {\n            if (index < 0) {\n                throw new Error(\"[mobx.array] Index out of bounds: \" + index + \" is negative\");\n            }\n            var length = this.$mobx.values.length;\n            if (index >= length) {\n                throw new Error(\"[mobx.array] Index out of bounds: \" + index + \" is not smaller than \" + length);\n            }\n        }\n        checkIndex.call(this, fromIndex);\n        checkIndex.call(this, toIndex);\n        if (fromIndex === toIndex) {\n            return;\n        }\n        var oldItems = this.$mobx.values;\n        var newItems;\n        if (fromIndex < toIndex) {\n            newItems = oldItems.slice(0, fromIndex).concat(oldItems.slice(fromIndex + 1, toIndex + 1), [oldItems[fromIndex]], oldItems.slice(toIndex + 1));\n        }\n        else {\n            newItems = oldItems.slice(0, toIndex).concat([oldItems[fromIndex]], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));\n        }\n        this.replace(newItems);\n    };\n    ObservableArray.prototype.toString = function () {\n        this.$mobx.atom.reportObserved();\n        return Array.prototype.toString.apply(this.$mobx.values, arguments);\n    };\n    ObservableArray.prototype.toLocaleString = function () {\n        this.$mobx.atom.reportObserved();\n        return Array.prototype.toLocaleString.apply(this.$mobx.values, arguments);\n    };\n    return ObservableArray;\n}(StubArray));\ndeclareIterator(ObservableArray.prototype, function () {\n    return arrayAsIterator(this.slice());\n});\nmakeNonEnumerable(ObservableArray.prototype, [\n    \"constructor\",\n    \"intercept\",\n    \"observe\",\n    \"clear\",\n    \"concat\",\n    \"replace\",\n    \"toJS\",\n    \"toJSON\",\n    \"peek\",\n    \"find\",\n    \"splice\",\n    \"spliceWithArray\",\n    \"push\",\n    \"pop\",\n    \"shift\",\n    \"unshift\",\n    \"reverse\",\n    \"sort\",\n    \"remove\",\n    \"move\",\n    \"toString\",\n    \"toLocaleString\"\n]);\nObject.defineProperty(ObservableArray.prototype, \"length\", {\n    enumerable: false,\n    configurable: true,\n    get: function () {\n        return this.$mobx.getArrayLength();\n    },\n    set: function (newLength) {\n        this.$mobx.setArrayLength(newLength);\n    }\n});\n[\n    \"every\",\n    \"filter\",\n    \"forEach\",\n    \"indexOf\",\n    \"join\",\n    \"lastIndexOf\",\n    \"map\",\n    \"reduce\",\n    \"reduceRight\",\n    \"slice\",\n    \"some\"\n].forEach(function (funcName) {\n    var baseFunc = Array.prototype[funcName];\n    invariant(typeof baseFunc === \"function\", \"Base function not defined on Array prototype: '\" + funcName + \"'\");\n    addHiddenProp(ObservableArray.prototype, funcName, function () {\n        this.$mobx.atom.reportObserved();\n        return baseFunc.apply(this.$mobx.values, arguments);\n    });\n});\nvar ENTRY_0 = {\n    configurable: true,\n    enumerable: false,\n    set: createArraySetter(0),\n    get: createArrayGetter(0)\n};\nfunction createArrayBufferItem(index) {\n    var set = createArraySetter(index);\n    var get = createArrayGetter(index);\n    Object.defineProperty(ObservableArray.prototype, \"\" + index, {\n        enumerable: false,\n        configurable: true,\n        set: set, get: get\n    });\n}\nfunction createArraySetter(index) {\n    return function (newValue) {\n        var adm = this.$mobx;\n        var values = adm.values;\n        if (index < values.length) {\n            checkIfStateModificationsAreAllowed(adm.atom);\n            var oldValue = values[index];\n            if (hasInterceptors(adm)) {\n                var change = interceptChange(adm, {\n                    type: \"update\",\n                    object: adm.array,\n                    index: index, newValue: newValue\n                });\n                if (!change)\n                    return;\n                newValue = change.newValue;\n            }\n            newValue = adm.enhancer(newValue, oldValue);\n            var changed = newValue !== oldValue;\n            if (changed) {\n                values[index] = newValue;\n                adm.notifyArrayChildUpdate(index, newValue, oldValue);\n            }\n        }\n        else if (index === values.length) {\n            adm.spliceWithArray(index, 0, [newValue]);\n        }\n        else\n            throw new Error(\"[mobx.array] Index out of bounds, \" + index + \" is larger than \" + values.length);\n    };\n}\nfunction createArrayGetter(index) {\n    return function () {\n        var impl = this.$mobx;\n        if (impl) {\n            if (index < impl.values.length) {\n                impl.atom.reportObserved();\n                return impl.values[index];\n            }\n            console.warn(\"[mobx.array] Attempt to read an array index (\" + index + \") that is out of bounds (\" + impl.values.length + \"). Please check length first. Out of bound indices will not be tracked by MobX\");\n        }\n        return undefined;\n    };\n}\nfunction reserveArrayBuffer(max) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++)\n        createArrayBufferItem(index);\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n}\nreserveArrayBuffer(1000);\nvar isObservableArrayAdministration = createInstanceofPredicate(\"ObservableArrayAdministration\", ObservableArrayAdministration);\nfunction isObservableArray(thing) {\n    return isObject(thing) && isObservableArrayAdministration(thing.$mobx);\n}\nvar ObservableMapMarker = {};\nvar ObservableMap = (function () {\n    function ObservableMap(initialData, enhancer, name) {\n        if (enhancer === void 0) { enhancer = deepEnhancer; }\n        if (name === void 0) { name = \"ObservableMap@\" + getNextId(); }\n        this.enhancer = enhancer;\n        this.name = name;\n        this.$mobx = ObservableMapMarker;\n        this._data = {};\n        this._hasMap = {};\n        this._keys = new ObservableArray(undefined, referenceEnhancer, this.name + \".keys()\", true);\n        this.interceptors = null;\n        this.changeListeners = null;\n        this.merge(initialData);\n    }\n    ObservableMap.prototype._has = function (key) {\n        return typeof this._data[key] !== \"undefined\";\n    };\n    ObservableMap.prototype.has = function (key) {\n        if (!this.isValidKey(key))\n            return false;\n        key = \"\" + key;\n        if (this._hasMap[key])\n            return this._hasMap[key].get();\n        return this._updateHasMapEntry(key, false).get();\n    };\n    ObservableMap.prototype.set = function (key, value) {\n        this.assertValidKey(key);\n        key = \"\" + key;\n        var hasKey = this._has(key);\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                type: hasKey ? \"update\" : \"add\",\n                object: this,\n                newValue: value,\n                name: key\n            });\n            if (!change)\n                return this;\n            value = change.newValue;\n        }\n        if (hasKey) {\n            this._updateValue(key, value);\n        }\n        else {\n            this._addValue(key, value);\n        }\n        return this;\n    };\n    ObservableMap.prototype.delete = function (key) {\n        var _this = this;\n        this.assertValidKey(key);\n        key = \"\" + key;\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                type: \"delete\",\n                object: this,\n                name: key\n            });\n            if (!change)\n                return false;\n        }\n        if (this._has(key)) {\n            var notifySpy = isSpyEnabled();\n            var notify = hasListeners(this);\n            var change = notify || notifySpy ? {\n                type: \"delete\",\n                object: this,\n                oldValue: this._data[key].value,\n                name: key\n            } : null;\n            if (notifySpy)\n                spyReportStart(change);\n            runInTransaction(function () {\n                _this._keys.remove(key);\n                _this._updateHasMapEntry(key, false);\n                var observable = _this._data[key];\n                observable.setNewValue(undefined);\n                _this._data[key] = undefined;\n            });\n            if (notify)\n                notifyListeners(this, change);\n            if (notifySpy)\n                spyReportEnd();\n            return true;\n        }\n        return false;\n    };\n    ObservableMap.prototype._updateHasMapEntry = function (key, value) {\n        var entry = this._hasMap[key];\n        if (entry) {\n            entry.setNewValue(value);\n        }\n        else {\n            entry = this._hasMap[key] = new ObservableValue(value, referenceEnhancer, this.name + \".\" + key + \"?\", false);\n        }\n        return entry;\n    };\n    ObservableMap.prototype._updateValue = function (name, newValue) {\n        var observable = this._data[name];\n        newValue = observable.prepareNewValue(newValue);\n        if (newValue !== UNCHANGED) {\n            var notifySpy = isSpyEnabled();\n            var notify = hasListeners(this);\n            var change = notify || notifySpy ? {\n                type: \"update\",\n                object: this,\n                oldValue: observable.value,\n                name: name, newValue: newValue\n            } : null;\n            if (notifySpy)\n                spyReportStart(change);\n            observable.setNewValue(newValue);\n            if (notify)\n                notifyListeners(this, change);\n            if (notifySpy)\n                spyReportEnd();\n        }\n    };\n    ObservableMap.prototype._addValue = function (name, newValue) {\n        var _this = this;\n        runInTransaction(function () {\n            var observable = _this._data[name] = new ObservableValue(newValue, _this.enhancer, _this.name + \".\" + name, false);\n            newValue = observable.value;\n            _this._updateHasMapEntry(name, true);\n            _this._keys.push(name);\n        });\n        var notifySpy = isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy ? {\n            type: \"add\",\n            object: this,\n            name: name, newValue: newValue\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    ObservableMap.prototype.get = function (key) {\n        key = \"\" + key;\n        if (this.has(key))\n            return this._data[key].get();\n        return undefined;\n    };\n    ObservableMap.prototype.keys = function () {\n        return arrayAsIterator(this._keys.slice());\n    };\n    ObservableMap.prototype.values = function () {\n        return arrayAsIterator(this._keys.map(this.get, this));\n    };\n    ObservableMap.prototype.entries = function () {\n        var _this = this;\n        return arrayAsIterator(this._keys.map(function (key) { return [key, _this.get(key)]; }));\n    };\n    ObservableMap.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        this.keys().forEach(function (key) { return callback.call(thisArg, _this.get(key), key, _this); });\n    };\n    ObservableMap.prototype.merge = function (other) {\n        var _this = this;\n        if (isObservableMap(other)) {\n            other = other.toJS();\n        }\n        runInTransaction(function () {\n            if (isPlainObject(other))\n                Object.keys(other).forEach(function (key) { return _this.set(key, other[key]); });\n            else if (Array.isArray(other))\n                other.forEach(function (_a) {\n                    var key = _a[0], value = _a[1];\n                    return _this.set(key, value);\n                });\n            else if (isES6Map(other))\n                other.forEach(function (value, key) { return _this.set(key, value); });\n            else if (other !== null && other !== undefined)\n                fail(\"Cannot initialize map from \" + other);\n        });\n        return this;\n    };\n    ObservableMap.prototype.clear = function () {\n        var _this = this;\n        runInTransaction(function () {\n            untracked(function () {\n                _this.keys().forEach(_this.delete, _this);\n            });\n        });\n    };\n    ObservableMap.prototype.replace = function (values) {\n        var _this = this;\n        runInTransaction(function () {\n            _this.clear();\n            _this.merge(values);\n        });\n        return this;\n    };\n    Object.defineProperty(ObservableMap.prototype, \"size\", {\n        get: function () {\n            return this._keys.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ObservableMap.prototype.toJS = function () {\n        var _this = this;\n        var res = {};\n        this.keys().forEach(function (key) { return res[key] = _this.get(key); });\n        return res;\n    };\n    ObservableMap.prototype.toJSON = function () {\n        return this.toJS();\n    };\n    ObservableMap.prototype.isValidKey = function (key) {\n        if (key === null || key === undefined)\n            return false;\n        if (typeof key === \"string\" || typeof key === \"number\" || typeof key === \"boolean\")\n            return true;\n        return false;\n    };\n    ObservableMap.prototype.assertValidKey = function (key) {\n        if (!this.isValidKey(key))\n            throw new Error(\"[mobx.map] Invalid key: '\" + key + \"', only strings, numbers and booleans are accepted as key in observable maps.\");\n    };\n    ObservableMap.prototype.toString = function () {\n        var _this = this;\n        return this.name + \"[{ \" + this.keys().map(function (key) { return key + \": \" + (\"\" + _this.get(key)); }).join(\", \") + \" }]\";\n    };\n    ObservableMap.prototype.observe = function (listener, fireImmediately) {\n        invariant(fireImmediately !== true, getMessage(\"m033\"));\n        return registerListener(this, listener);\n    };\n    ObservableMap.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    return ObservableMap;\n}());\ndeclareIterator(ObservableMap.prototype, function () {\n    return this.entries();\n});\nfunction map(initialValues) {\n    deprecated(\"`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead\");\n    return observable.map(initialValues);\n}\nvar isObservableMap = createInstanceofPredicate(\"ObservableMap\", ObservableMap);\nvar ObservableObjectAdministration = (function () {\n    function ObservableObjectAdministration(target, name) {\n        this.target = target;\n        this.name = name;\n        this.values = {};\n        this.changeListeners = null;\n        this.interceptors = null;\n    }\n    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {\n        invariant(fireImmediately !== true, \"`observe` doesn't support the fire immediately property for observable objects.\");\n        return registerListener(this, callback);\n    };\n    ObservableObjectAdministration.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    return ObservableObjectAdministration;\n}());\nfunction asObservableObject(target, name) {\n    if (isObservableObject(target))\n        return target.$mobx;\n    invariant(Object.isExtensible(target), getMessage(\"m035\"));\n    if (!isPlainObject(target))\n        name = (target.constructor.name || \"ObservableObject\") + \"@\" + getNextId();\n    if (!name)\n        name = \"ObservableObject@\" + getNextId();\n    var adm = new ObservableObjectAdministration(target, name);\n    addHiddenFinalProp(target, \"$mobx\", adm);\n    return adm;\n}\nfunction defineObservablePropertyFromDescriptor(adm, propName, descriptor, defaultEnhancer) {\n    if (adm.values[propName]) {\n        invariant(\"value\" in descriptor, \"The property \" + propName + \" in \" + adm.name + \" is already observable, cannot redefine it as computed property\");\n        adm.target[propName] = descriptor.value;\n        return;\n    }\n    if (\"value\" in descriptor) {\n        if (isModifierDescriptor(descriptor.value)) {\n            var modifierDescriptor = descriptor.value;\n            defineObservableProperty(adm, propName, modifierDescriptor.initialValue, modifierDescriptor.enhancer);\n        }\n        else if (isAction(descriptor.value) && descriptor.value.autoBind === true) {\n            defineBoundAction(adm.target, propName, descriptor.value.originalFn);\n        }\n        else if (isComputedValue(descriptor.value)) {\n            defineComputedPropertyFromComputedValue(adm, propName, descriptor.value);\n        }\n        else {\n            defineObservableProperty(adm, propName, descriptor.value, defaultEnhancer);\n        }\n    }\n    else {\n        defineComputedProperty(adm, propName, descriptor.get, descriptor.set, false, true);\n    }\n}\nfunction defineObservableProperty(adm, propName, newValue, enhancer) {\n    assertPropertyConfigurable(adm.target, propName);\n    if (hasInterceptors(adm)) {\n        var change = interceptChange(adm, {\n            object: adm.target,\n            name: propName,\n            type: \"add\",\n            newValue: newValue\n        });\n        if (!change)\n            return;\n        newValue = change.newValue;\n    }\n    var observable = adm.values[propName] = new ObservableValue(newValue, enhancer, adm.name + \".\" + propName, false);\n    newValue = observable.value;\n    Object.defineProperty(adm.target, propName, generateObservablePropConfig(propName));\n    notifyPropertyAddition(adm, adm.target, propName, newValue);\n}\nfunction defineComputedProperty(adm, propName, getter, setter, compareStructural, asInstanceProperty) {\n    if (asInstanceProperty)\n        assertPropertyConfigurable(adm.target, propName);\n    adm.values[propName] = new ComputedValue(getter, adm.target, compareStructural, adm.name + \".\" + propName, setter);\n    if (asInstanceProperty) {\n        Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));\n    }\n}\nfunction defineComputedPropertyFromComputedValue(adm, propName, computedValue) {\n    var name = adm.name + \".\" + propName;\n    computedValue.name = name;\n    if (!computedValue.scope)\n        computedValue.scope = adm.target;\n    adm.values[propName] = computedValue;\n    Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));\n}\nvar observablePropertyConfigs = {};\nvar computedPropertyConfigs = {};\nfunction generateObservablePropConfig(propName) {\n    return observablePropertyConfigs[propName] || (observablePropertyConfigs[propName] = {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            return this.$mobx.values[propName].get();\n        },\n        set: function (v) {\n            setPropertyValue(this, propName, v);\n        }\n    });\n}\nfunction generateComputedPropConfig(propName) {\n    return computedPropertyConfigs[propName] || (computedPropertyConfigs[propName] = {\n        configurable: true,\n        enumerable: false,\n        get: function () {\n            return this.$mobx.values[propName].get();\n        },\n        set: function (v) {\n            return this.$mobx.values[propName].set(v);\n        }\n    });\n}\nfunction setPropertyValue(instance, name, newValue) {\n    var adm = instance.$mobx;\n    var observable = adm.values[name];\n    if (hasInterceptors(adm)) {\n        var change = interceptChange(adm, {\n            type: \"update\",\n            object: instance,\n            name: name, newValue: newValue\n        });\n        if (!change)\n            return;\n        newValue = change.newValue;\n    }\n    newValue = observable.prepareNewValue(newValue);\n    if (newValue !== UNCHANGED) {\n        var notify = hasListeners(adm);\n        var notifySpy = isSpyEnabled();\n        var change = notify || notifySpy ? {\n            type: \"update\",\n            object: instance,\n            oldValue: observable.value,\n            name: name, newValue: newValue\n        } : null;\n        if (notifySpy)\n            spyReportStart(change);\n        observable.setNewValue(newValue);\n        if (notify)\n            notifyListeners(adm, change);\n        if (notifySpy)\n            spyReportEnd();\n    }\n}\nfunction notifyPropertyAddition(adm, object, name, newValue) {\n    var notify = hasListeners(adm);\n    var notifySpy = isSpyEnabled();\n    var change = notify || notifySpy ? {\n        type: \"add\",\n        object: object, name: name, newValue: newValue\n    } : null;\n    if (notifySpy)\n        spyReportStart(change);\n    if (notify)\n        notifyListeners(adm, change);\n    if (notifySpy)\n        spyReportEnd();\n}\nvar isObservableObjectAdministration = createInstanceofPredicate(\"ObservableObjectAdministration\", ObservableObjectAdministration);\nfunction isObservableObject(thing) {\n    if (isObject(thing)) {\n        runLazyInitializers(thing);\n        return isObservableObjectAdministration(thing.$mobx);\n    }\n    return false;\n}\nvar UNCHANGED = {};\nvar ObservableValue = (function (_super) {\n    __extends(ObservableValue, _super);\n    function ObservableValue(value, enhancer, name, notifySpy) {\n        if (name === void 0) { name = \"ObservableValue@\" + getNextId(); }\n        if (notifySpy === void 0) { notifySpy = true; }\n        var _this = _super.call(this, name) || this;\n        _this.enhancer = enhancer;\n        _this.hasUnreportedChange = false;\n        _this.value = enhancer(value, undefined, name);\n        if (notifySpy && isSpyEnabled()) {\n            spyReport({ type: \"create\", object: _this, newValue: _this.value });\n        }\n        return _this;\n    }\n    ObservableValue.prototype.set = function (newValue) {\n        var oldValue = this.value;\n        newValue = this.prepareNewValue(newValue);\n        if (newValue !== UNCHANGED) {\n            var notifySpy = isSpyEnabled();\n            if (notifySpy) {\n                spyReportStart({\n                    type: \"update\",\n                    object: this,\n                    newValue: newValue, oldValue: oldValue\n                });\n            }\n            this.setNewValue(newValue);\n            if (notifySpy)\n                spyReportEnd();\n        }\n    };\n    ObservableValue.prototype.prepareNewValue = function (newValue) {\n        checkIfStateModificationsAreAllowed(this);\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, { object: this, type: \"update\", newValue: newValue });\n            if (!change)\n                return UNCHANGED;\n            newValue = change.newValue;\n        }\n        newValue = this.enhancer(newValue, this.value, this.name);\n        return this.value !== newValue\n            ? newValue\n            : UNCHANGED;\n    };\n    ObservableValue.prototype.setNewValue = function (newValue) {\n        var oldValue = this.value;\n        this.value = newValue;\n        this.reportChanged();\n        if (hasListeners(this)) {\n            notifyListeners(this, {\n                type: \"update\",\n                object: this,\n                newValue: newValue,\n                oldValue: oldValue\n            });\n        }\n    };\n    ObservableValue.prototype.get = function () {\n        this.reportObserved();\n        return this.value;\n    };\n    ObservableValue.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    ObservableValue.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately)\n            listener({\n                object: this,\n                type: \"update\",\n                newValue: this.value,\n                oldValue: undefined\n            });\n        return registerListener(this, listener);\n    };\n    ObservableValue.prototype.toJSON = function () {\n        return this.get();\n    };\n    ObservableValue.prototype.toString = function () {\n        return this.name + \"[\" + this.value + \"]\";\n    };\n    ObservableValue.prototype.valueOf = function () {\n        return toPrimitive(this.get());\n    };\n    return ObservableValue;\n}(BaseAtom));\nObservableValue.prototype[primitiveSymbol()] = ObservableValue.prototype.valueOf;\nvar isObservableValue = createInstanceofPredicate(\"ObservableValue\", ObservableValue);\nfunction getAtom(thing, property) {\n    if (typeof thing === \"object\" && thing !== null) {\n        if (isObservableArray(thing)) {\n            invariant(property === undefined, getMessage(\"m036\"));\n            return thing.$mobx.atom;\n        }\n        if (isObservableMap(thing)) {\n            var anyThing = thing;\n            if (property === undefined)\n                return getAtom(anyThing._keys);\n            var observable_2 = anyThing._data[property] || anyThing._hasMap[property];\n            invariant(!!observable_2, \"the entry '\" + property + \"' does not exist in the observable map '\" + getDebugName(thing) + \"'\");\n            return observable_2;\n        }\n        runLazyInitializers(thing);\n        if (isObservableObject(thing)) {\n            if (!property)\n                return fail(\"please specify a property\");\n            var observable_3 = thing.$mobx.values[property];\n            invariant(!!observable_3, \"no observable property '\" + property + \"' found on the observable object '\" + getDebugName(thing) + \"'\");\n            return observable_3;\n        }\n        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n            return thing;\n        }\n    }\n    else if (typeof thing === \"function\") {\n        if (isReaction(thing.$mobx)) {\n            return thing.$mobx;\n        }\n    }\n    return fail(\"Cannot obtain atom from \" + thing);\n}\nfunction getAdministration(thing, property) {\n    invariant(thing, \"Expecting some object\");\n    if (property !== undefined)\n        return getAdministration(getAtom(thing, property));\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))\n        return thing;\n    if (isObservableMap(thing))\n        return thing;\n    runLazyInitializers(thing);\n    if (thing.$mobx)\n        return thing.$mobx;\n    invariant(false, \"Cannot obtain administration from \" + thing);\n}\nfunction getDebugName(thing, property) {\n    var named;\n    if (property !== undefined)\n        named = getAtom(thing, property);\n    else if (isObservableObject(thing) || isObservableMap(thing))\n        named = getAdministration(thing);\n    else\n        named = getAtom(thing);\n    return named.name;\n}\nfunction createClassPropertyDecorator(onInitialize, get, set, enumerable, allowCustomArguments) {\n    function classPropertyDecorator(target, key, descriptor, customArgs, argLen) {\n        if (argLen === void 0) { argLen = 0; }\n        invariant(allowCustomArguments || quacksLikeADecorator(arguments), \"This function is a decorator, but it wasn't invoked like a decorator\");\n        if (!descriptor) {\n            var newDescriptor = {\n                enumerable: enumerable,\n                configurable: true,\n                get: function () {\n                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true)\n                        typescriptInitializeProperty(this, key, undefined, onInitialize, customArgs, descriptor);\n                    return get.call(this, key);\n                },\n                set: function (v) {\n                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) {\n                        typescriptInitializeProperty(this, key, v, onInitialize, customArgs, descriptor);\n                    }\n                    else {\n                        set.call(this, key, v);\n                    }\n                }\n            };\n            if (arguments.length < 3 || arguments.length === 5 && argLen < 3) {\n                Object.defineProperty(target, key, newDescriptor);\n            }\n            return newDescriptor;\n        }\n        else {\n            if (!hasOwnProperty(target, \"__mobxLazyInitializers\")) {\n                addHiddenProp(target, \"__mobxLazyInitializers\", (target.__mobxLazyInitializers && target.__mobxLazyInitializers.slice()) || []);\n            }\n            var value_1 = descriptor.value, initializer_1 = descriptor.initializer;\n            target.__mobxLazyInitializers.push(function (instance) {\n                onInitialize(instance, key, (initializer_1 ? initializer_1.call(instance) : value_1), customArgs, descriptor);\n            });\n            return {\n                enumerable: enumerable, configurable: true,\n                get: function () {\n                    if (this.__mobxDidRunLazyInitializers !== true)\n                        runLazyInitializers(this);\n                    return get.call(this, key);\n                },\n                set: function (v) {\n                    if (this.__mobxDidRunLazyInitializers !== true)\n                        runLazyInitializers(this);\n                    set.call(this, key, v);\n                }\n            };\n        }\n    }\n    if (allowCustomArguments) {\n        return function () {\n            if (quacksLikeADecorator(arguments))\n                return classPropertyDecorator.apply(null, arguments);\n            var outerArgs = arguments;\n            var argLen = arguments.length;\n            return function (target, key, descriptor) { return classPropertyDecorator(target, key, descriptor, outerArgs, argLen); };\n        };\n    }\n    return classPropertyDecorator;\n}\nfunction typescriptInitializeProperty(instance, key, v, onInitialize, customArgs, baseDescriptor) {\n    if (!hasOwnProperty(instance, \"__mobxInitializedProps\"))\n        addHiddenProp(instance, \"__mobxInitializedProps\", {});\n    instance.__mobxInitializedProps[key] = true;\n    onInitialize(instance, key, v, customArgs, baseDescriptor);\n}\nfunction runLazyInitializers(instance) {\n    if (instance.__mobxDidRunLazyInitializers === true)\n        return;\n    if (instance.__mobxLazyInitializers) {\n        addHiddenProp(instance, \"__mobxDidRunLazyInitializers\", true);\n        instance.__mobxDidRunLazyInitializers && instance.__mobxLazyInitializers.forEach(function (initializer) { return initializer(instance); });\n    }\n}\nfunction quacksLikeADecorator(args) {\n    return (args.length === 2 || args.length === 3) && typeof args[1] === \"string\";\n}\nfunction iteratorSymbol() {\n    return (typeof Symbol === \"function\" && Symbol.iterator) || \"@@iterator\";\n}\nvar IS_ITERATING_MARKER = \"__$$iterating\";\nfunction arrayAsIterator(array) {\n    invariant(array[IS_ITERATING_MARKER] !== true, \"Illegal state: cannot recycle array as iterator\");\n    addHiddenFinalProp(array, IS_ITERATING_MARKER, true);\n    var idx = -1;\n    addHiddenFinalProp(array, \"next\", function next() {\n        idx++;\n        return {\n            done: idx >= this.length,\n            value: idx < this.length ? this[idx] : undefined\n        };\n    });\n    return array;\n}\nfunction declareIterator(prototType, iteratorFactory) {\n    addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);\n}\nvar messages = {\n    \"m001\": \"It is not allowed to assign new values to @action fields\",\n    \"m002\": \"`runInAction` expects a function\",\n    \"m003\": \"`runInAction` expects a function without arguments\",\n    \"m004\": \"autorun expects a function\",\n    \"m005\": \"Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.\",\n    \"m006\": \"Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.\",\n    \"m007\": \"reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object\",\n    \"m008\": \"wrapping reaction expression in `asReference` is no longer supported, use options object instead\",\n    \"m009\": \"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.\",\n    \"m010\": \"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'\",\n    \"m011\": \"First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments\",\n    \"m012\": \"computed takes one or two arguments if used as function\",\n    \"m013\": \"[mobx.expr] 'expr' should only be used inside other reactive functions.\",\n    \"m014\": \"extendObservable expected 2 or more arguments\",\n    \"m015\": \"extendObservable expects an object as first argument\",\n    \"m016\": \"extendObservable should not be used on maps, use map.merge instead\",\n    \"m017\": \"all arguments of extendObservable should be objects\",\n    \"m018\": \"extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540\",\n    \"m019\": \"[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\",\n    \"m020\": \"modifiers can only be used for individual object properties\",\n    \"m021\": \"observable expects zero or one arguments\",\n    \"m022\": \"@observable can not be used on getters, use @computed instead\",\n    \"m023\": \"Using `transaction` is deprecated, use `runInAction` or `(@)action` instead.\",\n    \"m024\": \"whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.\",\n    \"m025\": \"whyRun can only be used on reactions and computed values\",\n    \"m026\": \"`action` can only be invoked on functions\",\n    \"m028\": \"It is not allowed to set `useStrict` when a derivation is running\",\n    \"m029\": \"INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row\",\n    \"m030a\": \"Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: \",\n    \"m030b\": \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: \",\n    \"m031\": \"Computed values are not allowed to not cause side effects by changing observables that are already being observed. Tried to modify: \",\n    \"m032\": \"* This computation is suspended (not in use by any reaction) and won't run automatically.\\n\tDidn't expect this computation to be suspended at this point?\\n\t  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\\n\t  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).\",\n    \"m033\": \"`observe` doesn't support the fire immediately property for observable maps.\",\n    \"m034\": \"`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead\",\n    \"m035\": \"Cannot make the designated object observable; it is not extensible\",\n    \"m036\": \"It is not possible to get index atoms from arrays\",\n    \"m037\": \"Hi there! I'm sorry you have just run into an exception.\\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\\n\\nHowever, more interesting is the actual stack trace of the error itself.\\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\\nSee `error.stack` property, or press the very subtle \\\"(...)\\\" link you see near the console.error message that probably brought you here.\\nThat stack is more interesting than the stack of this console.error itself.\\n\\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error(\\\"Oops\\\")` instead of `throw \\\"Oops\\\"`,\\nbecause the javascript environment will only preserve the original stack trace in the first form.\\n\\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling \\\"Pause on caught exception\\\".\\n(Note that it might pause on many other, unrelated exception as well).\\n\\nIf that all doesn't help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\\n\",\n    \"m038\": \"Missing items in this list?\\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\\n\"\n};\nfunction getMessage(id) {\n    return messages[id];\n}\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nfunction getGlobal() {\n    return global;\n}\nfunction getNextId() {\n    return ++globalState.mobxGuid;\n}\nfunction fail(message, thing) {\n    invariant(false, message, thing);\n    throw \"X\";\n}\nfunction invariant(check, message, thing) {\n    if (!check)\n        throw new Error(\"[mobx] Invariant failed: \" + message + (thing ? \" in '\" + thing + \"'\" : \"\"));\n}\nvar deprecatedMessages = [];\nfunction deprecated(msg) {\n    if (deprecatedMessages.indexOf(msg) !== -1)\n        return false;\n    deprecatedMessages.push(msg);\n    console.error(\"[mobx] Deprecated: \" + msg);\n    return true;\n}\nfunction once(func) {\n    var invoked = false;\n    return function () {\n        if (invoked)\n            return;\n        invoked = true;\n        return func.apply(this, arguments);\n    };\n}\nvar noop = function () { };\nfunction unique(list) {\n    var res = [];\n    list.forEach(function (item) {\n        if (res.indexOf(item) === -1)\n            res.push(item);\n    });\n    return res;\n}\nfunction joinStrings(things, limit, separator) {\n    if (limit === void 0) { limit = 100; }\n    if (separator === void 0) { separator = \" - \"; }\n    if (!things)\n        return \"\";\n    var sliced = things.slice(0, limit);\n    return \"\" + sliced.join(separator) + (things.length > limit ? \" (... and \" + (things.length - limit) + \"more)\" : \"\");\n}\nfunction isObject(value) {\n    return value !== null && typeof value === \"object\";\n}\nfunction isPlainObject(value) {\n    if (value === null || typeof value !== \"object\")\n        return false;\n    var proto = Object.getPrototypeOf(value);\n    return proto === Object.prototype || proto === null;\n}\nfunction objectAssign() {\n    var res = arguments[0];\n    for (var i = 1, l = arguments.length; i < l; i++) {\n        var source = arguments[i];\n        for (var key in source)\n            if (hasOwnProperty(source, key)) {\n                res[key] = source[key];\n            }\n    }\n    return res;\n}\nfunction valueDidChange(compareStructural, oldValue, newValue) {\n    if (typeof oldValue === 'number' && isNaN(oldValue)) {\n        return typeof newValue !== 'number' || !isNaN(newValue);\n    }\n    return compareStructural\n        ? !deepEqual(oldValue, newValue)\n        : oldValue !== newValue;\n}\nvar prototypeHasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(object, propName) {\n    return prototypeHasOwnProperty.call(object, propName);\n}\nfunction makeNonEnumerable(object, propNames) {\n    for (var i = 0; i < propNames.length; i++) {\n        addHiddenProp(object, propNames[i], object[propNames[i]]);\n    }\n}\nfunction addHiddenProp(object, propName, value) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value: value\n    });\n}\nfunction addHiddenFinalProp(object, propName, value) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value: value\n    });\n}\nfunction isPropertyConfigurable(object, prop) {\n    var descriptor = Object.getOwnPropertyDescriptor(object, prop);\n    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);\n}\nfunction assertPropertyConfigurable(object, prop) {\n    invariant(isPropertyConfigurable(object, prop), \"Cannot make property '\" + prop + \"' observable, it is not configurable and writable in the target object\");\n}\nfunction getEnumerableKeys(obj) {\n    var res = [];\n    for (var key in obj)\n        res.push(key);\n    return res;\n}\nfunction deepEqual(a, b) {\n    if (a === null && b === null)\n        return true;\n    if (a === undefined && b === undefined)\n        return true;\n    if (typeof a !== \"object\")\n        return a === b;\n    var aIsArray = isArrayLike(a);\n    var aIsMap = isMapLike(a);\n    if (aIsArray !== isArrayLike(b)) {\n        return false;\n    }\n    else if (aIsMap !== isMapLike(b)) {\n        return false;\n    }\n    else if (aIsArray) {\n        if (a.length !== b.length)\n            return false;\n        for (var i = a.length - 1; i >= 0; i--)\n            if (!deepEqual(a[i], b[i]))\n                return false;\n        return true;\n    }\n    else if (aIsMap) {\n        if (a.size !== b.size)\n            return false;\n        var equals_1 = true;\n        a.forEach(function (value, key) {\n            equals_1 = equals_1 && deepEqual(b.get(key), value);\n        });\n        return equals_1;\n    }\n    else if (typeof a === \"object\" && typeof b === \"object\") {\n        if (a === null || b === null)\n            return false;\n        if (isMapLike(a) && isMapLike(b)) {\n            if (a.size !== b.size)\n                return false;\n            return deepEqual(observable.shallowMap(a).entries(), observable.shallowMap(b).entries());\n        }\n        if (getEnumerableKeys(a).length !== getEnumerableKeys(b).length)\n            return false;\n        for (var prop in a) {\n            if (!(prop in b))\n                return false;\n            if (!deepEqual(a[prop], b[prop]))\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\nfunction createInstanceofPredicate(name, clazz) {\n    var propName = \"isMobX\" + name;\n    clazz.prototype[propName] = true;\n    return function (x) {\n        return isObject(x) && x[propName] === true;\n    };\n}\nfunction isArrayLike(x) {\n    return Array.isArray(x) || isObservableArray(x);\n}\nfunction isMapLike(x) {\n    return isES6Map(x) || isObservableMap(x);\n}\nfunction isES6Map(thing) {\n    if (getGlobal().Map !== undefined && thing instanceof getGlobal().Map)\n        return true;\n    return false;\n}\nfunction primitiveSymbol() {\n    return (typeof Symbol === \"function\" && Symbol.toPrimitive) || \"@@toPrimitive\";\n}\nfunction toPrimitive(value) {\n    return value === null ? null : typeof value === \"object\" ? (\"\" + value) : value;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/mazimi/Projects/mobx/lib/es2015/mobx.js\n// module id = 0\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 1\n// module chunks = 0","module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/harmony-module.js\n// module id = 2\n// module chunks = 0","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar Something = (function () {\n    function Something() {\n        this.foo = 'empty';\n    }\n    return Something;\n}());\n__decorate([\n    mobx_1.observable\n], Something.prototype, \"foo\", void 0);\nvar s = new Something();\nmobx_1.reaction(function () { return s.foo; }, function () { return console.log('foo changed to', s.foo); });\nfor (var _i = 0, _a = Array(100); _i < _a.length; _i++) {\n    var i = _a[_i];\n    s.foo = Math.random().toString(36).substring(3);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.ts\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}